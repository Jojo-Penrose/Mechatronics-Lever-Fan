
Mechatronics-Lever-Fan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005a40  08005a40  00006a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c00  08005c00  000070c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c00  08005c00  00006c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c08  08005c08  000070c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c08  08005c08  00006c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c0c  08005c0c  00006c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08005c10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200000c0  08005cd0  000070c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08005cd0  0000735c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167ea  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bca  00000000  00000000  0001d8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  000204a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbd  00000000  00000000  00021500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3bd  00000000  00000000  000221bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138ba  00000000  00000000  0004d57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feb0a  00000000  00000000  00060e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f93e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e0c  00000000  00000000  0015f984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00165790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c0 	.word	0x200000c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a28 	.word	0x08005a28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c4 	.word	0x200000c4
 80001c4:	08005a28 	.word	0x08005a28

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <_ZNSt7__cxx119to_stringEl>:
  inline string
  to_string(long __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	0fdb      	lsrs	r3, r3, #31
 8000512:	77fb      	strb	r3, [r7, #31]
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
 8000514:	7ffb      	ldrb	r3, [r7, #31]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <_ZNSt7__cxx119to_stringEl+0x1c>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	425b      	negs	r3, r3
 800051e:	e000      	b.n	8000522 <_ZNSt7__cxx119to_stringEl+0x1e>
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	61bb      	str	r3, [r7, #24]
    const auto __len = __detail::__to_chars_len(__uval);
 8000524:	210a      	movs	r1, #10
 8000526:	69b8      	ldr	r0, [r7, #24]
 8000528:	f000 fac0 	bl	8000aac <_ZNSt8__detail14__to_chars_lenImEEjT_i>
 800052c:	6178      	str	r0, [r7, #20]
    string __str(__neg + __len, '-');
 800052e:	7ffa      	ldrb	r2, [r7, #31]
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	18d1      	adds	r1, r2, r3
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	613b      	str	r3, [r7, #16]
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	222d      	movs	r2, #45	@ 0x2d
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f004 fef7 	bl	8005334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fb8b 	bl	8000c66 <_ZNSt15__new_allocatorIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8000550:	7ffb      	ldrb	r3, [r7, #31]
 8000552:	4619      	mov	r1, r3
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f004 ff8d 	bl	8005474 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800055a:	4603      	mov	r3, r0
 800055c:	69ba      	ldr	r2, [r7, #24]
 800055e:	6979      	ldr	r1, [r7, #20]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fae3 	bl	8000b2c <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>
    return __str;
 8000566:	bf00      	nop
  }
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b09b      	sub	sp, #108	@ 0x6c
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fd7d 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f8bf 	bl	80006fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fa19 	bl	80009b4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000582:	f000 f9e3 	bl	800094c <_ZL19MX_USART2_UART_Initv>
  MX_TIM4_Init();
 8000586:	f000 f977 	bl	8000878 <_ZL12MX_TIM4_Initv>
  MX_TIM2_Init();
 800058a:	f000 f917 	bl	80007bc <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  // Start timers
  // Encoder timer
  HAL_TIM_Encoder_Start_IT (&htim2, TIM_CHANNEL_ALL);
 800058e:	213c      	movs	r1, #60	@ 0x3c
 8000590:	4851      	ldr	r0, [pc, #324]	@ (80006d8 <main+0x168>)
 8000592:	f002 fe85 	bl	80032a0 <HAL_TIM_Encoder_Start_IT>
  // Motor PWM timer
  HAL_TIM_PWM_Start (&htim4, TIM_CHANNEL_1);
 8000596:	2100      	movs	r1, #0
 8000598:	4850      	ldr	r0, [pc, #320]	@ (80006dc <main+0x16c>)
 800059a:	f002 fcd5 	bl	8002f48 <HAL_TIM_PWM_Start>

  // Message data buffer. Must be unsigned char array for HAL_UART_Transmit
  static unsigned char msg[100] = "Starting up. This string has to be long, for reasons.\r\n";
  const unsigned char blankchar[] = "\0";
 800059e:	2300      	movs	r3, #0
 80005a0:	83bb      	strh	r3, [r7, #28]
  // String to parrot encoder position
  string position_str;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4618      	mov	r0, r3
 80005a6:	f004 febe 	bl	8005326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

  // Non-blocking USART transmit (USART 2 for USB, message char array, length of message)
  // Short delay because the STM32 puts the cart before the horse
  HAL_Delay(50);
 80005aa:	2032      	movs	r0, #50	@ 0x32
 80005ac:	f000 fdde 	bl	800116c <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, blankchar, 1);
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	4849      	ldr	r0, [pc, #292]	@ (80006e0 <main+0x170>)
 80005ba:	f003 fcab 	bl	8003f14 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f000 fdd4 	bl	800116c <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
 80005c4:	2264      	movs	r2, #100	@ 0x64
 80005c6:	4947      	ldr	r1, [pc, #284]	@ (80006e4 <main+0x174>)
 80005c8:	4845      	ldr	r0, [pc, #276]	@ (80006e0 <main+0x170>)
 80005ca:	f003 fca3 	bl	8003f14 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	@ 0x64
 80005d0:	f000 fdcc 	bl	800116c <HAL_Delay>

  memset(&msg, '\0', sizeof(msg));
 80005d4:	2264      	movs	r2, #100	@ 0x64
 80005d6:	2100      	movs	r1, #0
 80005d8:	4842      	ldr	r0, [pc, #264]	@ (80006e4 <main+0x174>)
 80005da:	f005 f945 	bl	8005868 <memset>

  // Encoder ticks variable -- init at startup position
  static volatile long int position_ticks = TIM2 -> CNT;
 80005de:	4b42      	ldr	r3, [pc, #264]	@ (80006e8 <main+0x178>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f3bf 8f5b 	dmb	ish
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf0c      	ite	eq
 80005ee:	2301      	moveq	r3, #1
 80005f0:	2300      	movne	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d013      	beq.n	8000620 <main+0xb0>
 80005f8:	483b      	ldr	r0, [pc, #236]	@ (80006e8 <main+0x178>)
 80005fa:	f004 fddd 	bl	80051b8 <__cxa_guard_acquire>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d008      	beq.n	8000620 <main+0xb0>
 800060e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000614:	461a      	mov	r2, r3
 8000616:	4b35      	ldr	r3, [pc, #212]	@ (80006ec <main+0x17c>)
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	4833      	ldr	r0, [pc, #204]	@ (80006e8 <main+0x178>)
 800061c:	f004 fdd8 	bl	80051d0 <__cxa_guard_release>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // After the message transmits, wait one second and retransmit
	  if (txflag)
 8000620:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <main+0x180>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0fa      	beq.n	8000620 <main+0xb0>
	  {
		  // Wait one second (BLOCKING!!!)
		  HAL_Delay(1000);
 800062a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062e:	f000 fd9d 	bl	800116c <HAL_Delay>

		  // Pull current encoder position
		  position_ticks = TIM2 -> CNT;
 8000632:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000638:	461a      	mov	r2, r3
 800063a:	4b2c      	ldr	r3, [pc, #176]	@ (80006ec <main+0x17c>)
 800063c:	601a      	str	r2, [r3, #0]
		  position_str = ("Encoder positon: " + to_string(position_ticks) + "\r\n");
 800063e:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <main+0x17c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff5b 	bl	8000504 <_ZNSt7__cxx119to_stringEl>
 800064e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000652:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000656:	4927      	ldr	r1, [pc, #156]	@ (80006f4 <main+0x184>)
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fad5 	bl	8000c08 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000666:	4a24      	ldr	r2, [pc, #144]	@ (80006f8 <main+0x188>)
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fae5 	bl	8000c38 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800066e:	f107 0220 	add.w	r2, r7, #32
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4611      	mov	r1, r2
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fe8a 	bl	8005390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f004 fe7f 	bl	8005384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000686:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fe7a 	bl	8005384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000690:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fe75 	bl	8005384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		  // Create a msg with encoder pos
		  memset(&msg, '\0', sizeof(msg));
 800069a:	2264      	movs	r2, #100	@ 0x64
 800069c:	2100      	movs	r1, #0
 800069e:	4811      	ldr	r0, [pc, #68]	@ (80006e4 <main+0x174>)
 80006a0:	f005 f8e2 	bl	8005868 <memset>
		  memcpy(msg, position_str.c_str(), position_str.length() + 1);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 ffd6 	bl	8005658 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80006ac:	4604      	mov	r4, r0
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fe9c 	bl	80053ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80006b6:	4603      	mov	r3, r0
 80006b8:	3301      	adds	r3, #1
 80006ba:	461a      	mov	r2, r3
 80006bc:	4621      	mov	r1, r4
 80006be:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <main+0x174>)
 80006c0:	f005 f95a 	bl	8005978 <memcpy>

		  // Non-blocking transmit
		  HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg) - 1);
 80006c4:	2263      	movs	r2, #99	@ 0x63
 80006c6:	4907      	ldr	r1, [pc, #28]	@ (80006e4 <main+0x174>)
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <main+0x170>)
 80006ca:	f003 fc23 	bl	8003f14 <HAL_UART_Transmit_IT>
		  // Lower transmit flag
		  txflag = 0;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <main+0x180>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	  if (txflag)
 80006d4:	e7a4      	b.n	8000620 <main+0xb0>
 80006d6:	bf00      	nop
 80006d8:	200000dc 	.word	0x200000dc
 80006dc:	20000128 	.word	0x20000128
 80006e0:	20000174 	.word	0x20000174
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000204 	.word	0x20000204
 80006ec:	20000200 	.word	0x20000200
 80006f0:	200001fc 	.word	0x200001fc
 80006f4:	08005a40 	.word	0x08005a40
 80006f8:	08005a54 	.word	0x08005a54

080006fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b096      	sub	sp, #88	@ 0x58
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2244      	movs	r2, #68	@ 0x44
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f005 f8ac 	bl	8005868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000722:	f001 f8a7 	bl	8001874 <HAL_PWREx_ControlVoltageScaling>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	bf14      	ite	ne
 800072c:	2301      	movne	r3, #1
 800072e:	2300      	moveq	r3, #0
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000736:	f000 f9b3 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073a:	2302      	movs	r3, #2
 800073c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000754:	230a      	movs	r3, #10
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000758:	2307      	movs	r3, #7
 800075a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f001 f8d9 	bl	8001920 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 800077e:	f000 f98f 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2104      	movs	r1, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fc9c 	bl	80020d8 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf14      	ite	ne
 80007a6:	2301      	movne	r3, #1
 80007a8:	2300      	moveq	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80007b0:	f000 f976 	bl	8000aa0 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3758      	adds	r7, #88	@ 0x58
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2224      	movs	r2, #36	@ 0x24
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f005 f84c 	bl	8005868 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007da:	4b26      	ldr	r3, [pc, #152]	@ (8000874 <_ZL12MX_TIM2_Initv+0xb8>)
 80007dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007e2:	4b24      	ldr	r3, [pc, #144]	@ (8000874 <_ZL12MX_TIM2_Initv+0xb8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <_ZL12MX_TIM2_Initv+0xb8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007ee:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <_ZL12MX_TIM2_Initv+0xb8>)
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <_ZL12MX_TIM2_Initv+0xb8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <_ZL12MX_TIM2_Initv+0xb8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000802:	2301      	movs	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800080a:	2301      	movs	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800081a:	2301      	movs	r3, #1
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4811      	ldr	r0, [pc, #68]	@ (8000874 <_ZL12MX_TIM2_Initv+0xb8>)
 800082e:	f002 fc91 	bl	8003154 <HAL_TIM_Encoder_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf14      	ite	ne
 8000838:	2301      	movne	r3, #1
 800083a:	2300      	moveq	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8000842:	f000 f92d 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4808      	ldr	r0, [pc, #32]	@ (8000874 <_ZL12MX_TIM2_Initv+0xb8>)
 8000854:	f003 fa88 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf14      	ite	ne
 800085e:	2301      	movne	r3, #1
 8000860:	2300      	moveq	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000868:	f000 f91a 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3730      	adds	r7, #48	@ 0x30
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000dc 	.word	0x200000dc

08000878 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800089c:	4b29      	ldr	r3, [pc, #164]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 800089e:	4a2a      	ldr	r2, [pc, #168]	@ (8000948 <_ZL12MX_TIM4_Initv+0xd0>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008a2:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 80008ae:	4b25      	ldr	r3, [pc, #148]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 80008b0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80008b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008bc:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008c2:	4820      	ldr	r0, [pc, #128]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 80008c4:	f002 fae8 	bl	8002e98 <HAL_TIM_PWM_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <_ZL12MX_TIM4_Initv+0x64>
  {
    Error_Handler();
 80008d8:	f000 f8e2 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4816      	ldr	r0, [pc, #88]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 80008ec:	f003 fa3c 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf14      	ite	ne
 80008f6:	2301      	movne	r3, #1
 80008f8:	2300      	moveq	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <_ZL12MX_TIM4_Initv+0x8c>
  {
    Error_Handler();
 8000900:	f000 f8ce 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000904:	2360      	movs	r3, #96	@ 0x60
 8000906:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	480a      	ldr	r0, [pc, #40]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 800091c:	f002 fd6e 	bl	80033fc <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf14      	ite	ne
 8000926:	2301      	movne	r3, #1
 8000928:	2300      	moveq	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <_ZL12MX_TIM4_Initv+0xbc>
  {
    Error_Handler();
 8000930:	f000 f8b6 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <_ZL12MX_TIM4_Initv+0xcc>)
 8000936:	f000 fa31 	bl	8000d9c <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	@ 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000128 	.word	0x20000128
 8000948:	40000800 	.word	0x40000800

0800094c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 8000952:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4807      	ldr	r0, [pc, #28]	@ (80009ac <_ZL19MX_USART2_UART_Initv+0x60>)
 8000990:	f003 fa72 	bl	8003e78 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	bf14      	ite	ne
 800099a:	2301      	movne	r3, #1
 800099c:	2300      	moveq	r3, #0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80009a4:	f000 f87c 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000174 	.word	0x20000174
 80009b0:	40004400 	.word	0x40004400

080009b4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a2a      	ldr	r2, [pc, #168]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a24      	ldr	r2, [pc, #144]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	4a18      	ldr	r2, [pc, #96]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2160      	movs	r1, #96	@ 0x60
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f000 fef9 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <_ZL12MX_GPIO_Initv+0xc8>)
 8000a4e:	f000 fd41 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|MOTOR_DIR_Pin;
 8000a52:	2360      	movs	r3, #96	@ 0x60
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6c:	f000 fd32 	bl	80014d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	@ 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000800 	.word	0x48000800

08000a80 <HAL_UART_TxCpltCallback>:
/**
  * @brief  This callback runs when the non-blocking USART transmit completes.
  * @retval None
  */
void HAL_UART_TxCpltCallback (UART_HandleTypeDef * huart)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	//Tell the world that our transmit is complete
	txflag = 1;
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <HAL_UART_TxCpltCallback+0x1c>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	200001fc 	.word	0x200001fc

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <_ZNSt8__detail14__to_chars_lenImEEjT_i>:
#endif

  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8000aac:	b480      	push	{r7}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      unsigned __n = 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	fb03 f303 	mul.w	r3, r3, r3
 8000ac0:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	fb02 f303 	mul.w	r3, r2, r3
 8000aca:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	fb02 f303 	mul.w	r3, r2, r3
 8000ad4:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d201      	bcs.n	8000ae2 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x36>
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	e01d      	b.n	8000b1e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d202      	bcs.n	8000af0 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x44>
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	e016      	b.n	8000b1e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d202      	bcs.n	8000afe <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x52>
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3302      	adds	r3, #2
 8000afc:	e00f      	b.n	8000b1e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d202      	bcs.n	8000b0c <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x60>
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	e008      	b.n	8000b1e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  __value /= __b4;
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b14:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8000b1c:	e7db      	b.n	8000ad6 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x2a>
	}
    }
 8000b1e:	4618      	mov	r0, r3
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    _GLIBCXX23_CONSTEXPR void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0ba      	sub	sp, #232	@ 0xe8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
    {
#if __cpp_variable_templates
      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");
#endif

      constexpr char __digits[201] =
 8000b38:	4a31      	ldr	r2, [pc, #196]	@ (8000c00 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xd4>)
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4611      	mov	r1, r2
 8000b40:	22c9      	movs	r2, #201	@ 0xc9
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 ff18 	bl	8005978 <memcpy>
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      while (__val >= 100)
 8000b50:	e02e      	b.n	8000bb0 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x84>
	{
	  auto const __num = (__val % 100) * 2;
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4b2b      	ldr	r3, [pc, #172]	@ (8000c04 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xd8>)
 8000b56:	fba3 1302 	umull	r1, r3, r3, r2
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2164      	movs	r1, #100	@ 0x64
 8000b5e:	fb01 f303 	mul.w	r3, r1, r3
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	  __val /= 100;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a25      	ldr	r2, [pc, #148]	@ (8000c04 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xd8>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8000b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	68f9      	ldr	r1, [r7, #12]
 8000b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b82:	440b      	add	r3, r1
 8000b84:	32e8      	adds	r2, #232	@ 0xe8
 8000b86:	443a      	add	r2, r7
 8000b88:	f812 2cd8 	ldrb.w	r2, [r2, #-216]
 8000b8c:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8000b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b92:	3b01      	subs	r3, #1
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	f107 0110 	add.w	r1, r7, #16
 8000b9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000ba0:	440a      	add	r2, r1
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8000ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000baa:	3b02      	subs	r3, #2
 8000bac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      while (__val >= 100)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b63      	cmp	r3, #99	@ 0x63
 8000bb4:	d8cd      	bhi.n	8000b52 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x26>
	}
      if (__val >= 10)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b09      	cmp	r3, #9
 8000bba:	d916      	bls.n	8000bea <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xbe>
	{
	  auto const __num = __val * 2;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	  __first[1] = __digits[__num + 1];
 8000bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	32e8      	adds	r2, #232	@ 0xe8
 8000bd0:	443a      	add	r2, r7
 8000bd2:	f812 2cd8 	ldrb.w	r2, [r2, #-216]
 8000bd6:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8000bd8:	f107 0210 	add.w	r2, r7, #16
 8000bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000be0:	4413      	add	r3, r2
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8000be8:	e005      	b.n	8000bf6 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xca>
	__first[0] = '0' + __val;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3330      	adds	r3, #48	@ 0x30
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	701a      	strb	r2, [r3, #0]
    }
 8000bf6:	bf00      	nop
 8000bf8:	37e8      	adds	r7, #232	@ 0xe8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	08005a58 	.word	0x08005a58
 8000c04:	51eb851f 	.word	0x51eb851f

08000c08 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	2100      	movs	r1, #0
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f004 fcd3 	bl	80055c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f82b 	bl	8000c7c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f004 fb8b 	bl	8005346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	68b8      	ldr	r0, [r7, #8]
 8000c48:	f004 fcf0 	bl	800562c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f814 	bl	8000c7c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4619      	mov	r1, r3
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f004 fb74 	bl	8005346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cfc:	d128      	bne.n	8000d50 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	4a15      	ldr	r2, [pc, #84]	@ (8000d58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f000 fbc2 	bl	80014d4 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	@ 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <HAL_TIM_PWM_MspInit+0x38>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10b      	bne.n	8000d86 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	4a09      	ldr	r2, [pc, #36]	@ (8000d98 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40000800 	.word	0x40000800
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a11      	ldr	r2, [pc, #68]	@ (8000e00 <HAL_TIM_MspPostInit+0x64>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d11b      	bne.n	8000df6 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_TIM_MspPostInit+0x68>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <HAL_TIM_MspPostInit+0x68>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_TIM_MspPostInit+0x68>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8000dd6:	2340      	movs	r3, #64	@ 0x40
 8000dd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <HAL_TIM_MspPostInit+0x6c>)
 8000df2:	f000 fb6f 	bl	80014d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40000800 	.word	0x40000800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000400 	.word	0x48000400

08000e0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ac      	sub	sp, #176	@ 0xb0
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2288      	movs	r2, #136	@ 0x88
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fd1b 	bl	8005868 <memset>
  if(huart->Instance==USART2)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a25      	ldr	r2, [pc, #148]	@ (8000ecc <HAL_UART_MspInit+0xc0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d143      	bne.n	8000ec4 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 fb69 	bl	8002520 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e54:	f7ff fe24 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <HAL_UART_MspInit+0xc4>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb0:	f000 fb10 	bl	80014d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2026      	movs	r0, #38	@ 0x26
 8000eba:	f000 fa56 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ebe:	2026      	movs	r0, #38	@ 0x26
 8000ec0:	f000 fa6f 	bl	80013a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ec4:	bf00      	nop
 8000ec6:	37b0      	adds	r7, #176	@ 0xb0
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40004400 	.word	0x40004400
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f8ff 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <USART2_IRQHandler+0x10>)
 8000f3a:	f003 f849 	bl	8003fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000174 	.word	0x20000174

08000f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return 1;
 8000f4c:	2301      	movs	r3, #1
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_kill>:

int _kill(int pid, int sig)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f62:	f004 fcdd 	bl	8005920 <__errno>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2216      	movs	r2, #22
 8000f6a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_exit>:

void _exit (int status)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ffe7 	bl	8000f58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f8a:	bf00      	nop
 8000f8c:	e7fd      	b.n	8000f8a <_exit+0x12>
	...

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f004 fcae 	bl	8005920 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20018000 	.word	0x20018000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	20000208 	.word	0x20000208
 8000ff8:	20000360 	.word	0x20000360

08000ffc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <SystemInit+0x20>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <SystemInit+0x20>)
 8001008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001024:	f7ff ffea 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	@ (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	@ (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f004 fc6d 	bl	800592c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001052:	f7ff fa8d 	bl	8000570 <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001058:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001064:	08005c10 	.word	0x08005c10
  ldr r2, =_sbss
 8001068:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800106c:	2000035c 	.word	0x2000035c

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <HAL_Init+0x3c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <HAL_Init+0x3c>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001088:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 f962 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001090:	2000      	movs	r0, #0
 8001092:	f000 f80f 	bl	80010b4 <HAL_InitTick>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	e001      	b.n	80010a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a2:	f7ff fdf7 	bl	8000c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40022000 	.word	0x40022000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <HAL_InitTick+0x6c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_InitTick+0x70>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <HAL_InitTick+0x6c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f96d 	bl	80013be <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d809      	bhi.n	8001104 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f937 	bl	800136a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <HAL_InitTick+0x74>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e007      	b.n	8001114 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e004      	b.n	8001114 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e001      	b.n	8001114 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000006c 	.word	0x2000006c
 8001124:	20000064 	.word	0x20000064
 8001128:	20000068 	.word	0x20000068

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	2000006c 	.word	0x2000006c
 8001150:	2000020c 	.word	0x2000020c

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	2000020c 	.word	0x2000020c

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000006c 	.word	0x2000006c

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	@ (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	@ (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	@ 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff29 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff3e 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff8e 	bl	80012a8 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff31 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffa2 	bl	8001310 <SysTick_Config>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d008      	beq.n	8001400 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2204      	movs	r2, #4
 80013f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e022      	b.n	8001446 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 020e 	bic.w	r2, r2, #14
 800140e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	f003 021c 	and.w	r2, r3, #28
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d005      	beq.n	8001476 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2204      	movs	r2, #4
 800146e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e029      	b.n	80014ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 020e 	bic.w	r2, r2, #14
 8001484:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f003 021c 	and.w	r2, r3, #28
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f202 	lsl.w	r2, r1, r2
 80014a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	4798      	blx	r3
    }
  }
  return status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e17f      	b.n	80017e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8171 	beq.w	80017de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <HAL_GPIO_Init+0x40>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d130      	bne.n	8001576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154a:	2201      	movs	r2, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 0201 	and.w	r2, r3, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b03      	cmp	r3, #3
 8001580:	d118      	bne.n	80015b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001588:	2201      	movs	r2, #1
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	f003 0201 	and.w	r2, r3, #1
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d017      	beq.n	80015f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d123      	bne.n	8001644 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	6939      	ldr	r1, [r7, #16]
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80ac 	beq.w	80017de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b5f      	ldr	r3, [pc, #380]	@ (8001804 <HAL_GPIO_Init+0x330>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	4a5e      	ldr	r2, [pc, #376]	@ (8001804 <HAL_GPIO_Init+0x330>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6613      	str	r3, [r2, #96]	@ 0x60
 8001692:	4b5c      	ldr	r3, [pc, #368]	@ (8001804 <HAL_GPIO_Init+0x330>)
 8001694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800169e:	4a5a      	ldr	r2, [pc, #360]	@ (8001808 <HAL_GPIO_Init+0x334>)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016c8:	d025      	beq.n	8001716 <HAL_GPIO_Init+0x242>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	@ (800180c <HAL_GPIO_Init+0x338>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01f      	beq.n	8001712 <HAL_GPIO_Init+0x23e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001810 <HAL_GPIO_Init+0x33c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0x23a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001814 <HAL_GPIO_Init+0x340>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x236>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001818 <HAL_GPIO_Init+0x344>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x232>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4b      	ldr	r2, [pc, #300]	@ (800181c <HAL_GPIO_Init+0x348>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x22e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001820 <HAL_GPIO_Init+0x34c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x22a>
 80016fa:	2306      	movs	r3, #6
 80016fc:	e00c      	b.n	8001718 <HAL_GPIO_Init+0x244>
 80016fe:	2307      	movs	r3, #7
 8001700:	e00a      	b.n	8001718 <HAL_GPIO_Init+0x244>
 8001702:	2305      	movs	r3, #5
 8001704:	e008      	b.n	8001718 <HAL_GPIO_Init+0x244>
 8001706:	2304      	movs	r3, #4
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x244>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x244>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x244>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x244>
 8001716:	2300      	movs	r3, #0
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001728:	4937      	ldr	r1, [pc, #220]	@ (8001808 <HAL_GPIO_Init+0x334>)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001736:	4b3b      	ldr	r3, [pc, #236]	@ (8001824 <HAL_GPIO_Init+0x350>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800175a:	4a32      	ldr	r2, [pc, #200]	@ (8001824 <HAL_GPIO_Init+0x350>)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001760:	4b30      	ldr	r3, [pc, #192]	@ (8001824 <HAL_GPIO_Init+0x350>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001784:	4a27      	ldr	r2, [pc, #156]	@ (8001824 <HAL_GPIO_Init+0x350>)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800178a:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <HAL_GPIO_Init+0x350>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <HAL_GPIO_Init+0x350>)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_GPIO_Init+0x350>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d8:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <HAL_GPIO_Init+0x350>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa22 f303 	lsr.w	r3, r2, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f47f ae78 	bne.w	80014e4 <HAL_GPIO_Init+0x10>
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000
 800180c:	48000400 	.word	0x48000400
 8001810:	48000800 	.word	0x48000800
 8001814:	48000c00 	.word	0x48000c00
 8001818:	48001000 	.word	0x48001000
 800181c:	48001400 	.word	0x48001400
 8001820:	48001800 	.word	0x48001800
 8001824:	40010400 	.word	0x40010400

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001844:	e002      	b.n	800184c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <HAL_PWREx_GetVoltageRange+0x18>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001882:	d130      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001884:	4b23      	ldr	r3, [pc, #140]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800188c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001890:	d038      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800189a:	4a1e      	ldr	r2, [pc, #120]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2232      	movs	r2, #50	@ 0x32
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	4a1b      	ldr	r2, [pc, #108]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b8:	e002      	b.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018cc:	d102      	bne.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f2      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018e0:	d110      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e00f      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f2:	d007      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018fc:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007000 	.word	0x40007000
 8001918:	20000064 	.word	0x20000064
 800191c:	431bde83 	.word	0x431bde83

08001920 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e3ca      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001932:	4b97      	ldr	r3, [pc, #604]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193c:	4b94      	ldr	r3, [pc, #592]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80e4 	beq.w	8001b1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_RCC_OscConfig+0x4a>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b0c      	cmp	r3, #12
 800195e:	f040 808b 	bne.w	8001a78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b01      	cmp	r3, #1
 8001966:	f040 8087 	bne.w	8001a78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196a:	4b89      	ldr	r3, [pc, #548]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x62>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e3a2      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	4b82      	ldr	r3, [pc, #520]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_RCC_OscConfig+0x7c>
 8001992:	4b7f      	ldr	r3, [pc, #508]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800199a:	e005      	b.n	80019a8 <HAL_RCC_OscConfig+0x88>
 800199c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d223      	bcs.n	80019f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fd55 	bl	8002460 <RCC_SetFlashLatencyFromMSIRange>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e383      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c0:	4b73      	ldr	r3, [pc, #460]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a72      	ldr	r2, [pc, #456]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b70      	ldr	r3, [pc, #448]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	496d      	ldr	r1, [pc, #436]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019de:	4b6c      	ldr	r3, [pc, #432]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	4968      	ldr	r1, [pc, #416]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
 80019f2:	e025      	b.n	8001a40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f4:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a65      	ldr	r2, [pc, #404]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b63      	ldr	r3, [pc, #396]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4960      	ldr	r1, [pc, #384]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a12:	4b5f      	ldr	r3, [pc, #380]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	495b      	ldr	r1, [pc, #364]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fd15 	bl	8002460 <RCC_SetFlashLatencyFromMSIRange>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e343      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a40:	f000 fc4a 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b52      	ldr	r3, [pc, #328]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	4950      	ldr	r1, [pc, #320]	@ (8001b94 <HAL_RCC_OscConfig+0x274>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b98 <HAL_RCC_OscConfig+0x278>)
 8001a5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a60:	4b4e      	ldr	r3, [pc, #312]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fb25 	bl	80010b4 <HAL_InitTick>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d052      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	e327      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d032      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a80:	4b43      	ldr	r3, [pc, #268]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a42      	ldr	r2, [pc, #264]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fb62 	bl	8001154 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a94:	f7ff fb5e 	bl	8001154 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e310      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab2:	4b37      	ldr	r3, [pc, #220]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a36      	ldr	r2, [pc, #216]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4931      	ldr	r1, [pc, #196]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	492c      	ldr	r1, [pc, #176]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
 8001ae4:	e01a      	b.n	8001b1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a29      	ldr	r2, [pc, #164]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af2:	f7ff fb2f 	bl	8001154 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afa:	f7ff fb2b 	bl	8001154 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e2dd      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b0c:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x1da>
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d074      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x21a>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d10e      	bne.n	8001b52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d10b      	bne.n	8001b52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d064      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d160      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e2ba      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x24a>
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e026      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b72:	d115      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x280>
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a02      	ldr	r2, [pc, #8]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e014      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	08005b24 	.word	0x08005b24
 8001b98:	20000064 	.word	0x20000064
 8001b9c:	20000068 	.word	0x20000068
 8001ba0:	4ba0      	ldr	r3, [pc, #640]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a9f      	ldr	r2, [pc, #636]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b9d      	ldr	r3, [pc, #628]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a9c      	ldr	r2, [pc, #624]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fac8 	bl	8001154 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fac4 	bl	8001154 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e276      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4b92      	ldr	r3, [pc, #584]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2a8>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fab4 	bl	8001154 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fab0 	bl	8001154 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e262      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c02:	4b88      	ldr	r3, [pc, #544]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2d0>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d060      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x310>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d116      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c30:	4b7c      	ldr	r3, [pc, #496]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x328>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e23f      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b76      	ldr	r3, [pc, #472]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	4973      	ldr	r1, [pc, #460]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5c:	e040      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d023      	beq.n	8001cae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c66:	4b6f      	ldr	r3, [pc, #444]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff fa6f 	bl	8001154 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fa6b 	bl	8001154 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e21d      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8c:	4b65      	ldr	r3, [pc, #404]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b62      	ldr	r3, [pc, #392]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	495f      	ldr	r1, [pc, #380]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	e018      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b5d      	ldr	r3, [pc, #372]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fa4b 	bl	8001154 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fa47 	bl	8001154 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1f9      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd4:	4b53      	ldr	r3, [pc, #332]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d03c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff fa26 	bl	8001154 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fa22 	bl	8001154 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1d4      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1e:	4b41      	ldr	r3, [pc, #260]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ef      	beq.n	8001d0c <HAL_RCC_OscConfig+0x3ec>
 8001d2c:	e01b      	b.n	8001d66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d34:	4a3b      	ldr	r2, [pc, #236]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fa09 	bl	8001154 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff fa05 	bl	8001154 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1b7      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d58:	4b32      	ldr	r3, [pc, #200]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ef      	bne.n	8001d46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a6 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d78:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	4a26      	ldr	r2, [pc, #152]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d90:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	4b21      	ldr	r3, [pc, #132]	@ (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d118      	bne.n	8001dde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dac:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db8:	f7ff f9cc 	bl	8001154 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7ff f9c8 	bl	8001154 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e17a      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d8>
 8001de6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df6:	e029      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d115      	bne.n	8001e2c <HAL_RCC_OscConfig+0x50c>
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e06:	4a07      	ldr	r2, [pc, #28]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e16:	4a03      	ldr	r2, [pc, #12]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	4b9c      	ldr	r3, [pc, #624]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e32:	4a9b      	ldr	r2, [pc, #620]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e3c:	4b98      	ldr	r3, [pc, #608]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e42:	4a97      	ldr	r2, [pc, #604]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d016      	beq.n	8001e82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f97e 	bl	8001154 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f97a 	bl	8001154 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e12a      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e72:	4b8b      	ldr	r3, [pc, #556]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ed      	beq.n	8001e5c <HAL_RCC_OscConfig+0x53c>
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff f967 	bl	8001154 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff f963 	bl	8001154 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e113      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b7f      	ldr	r3, [pc, #508]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ed      	bne.n	8001e8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b7a      	ldr	r3, [pc, #488]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	4a79      	ldr	r2, [pc, #484]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80fe 	beq.w	80020c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	f040 80d0 	bne.w	8002074 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ed4:	4b72      	ldr	r3, [pc, #456]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d130      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d127      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d11f      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f14:	2a07      	cmp	r2, #7
 8001f16:	bf14      	ite	ne
 8001f18:	2201      	movne	r2, #1
 8001f1a:	2200      	moveq	r2, #0
 8001f1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d113      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	3b01      	subs	r3, #1
 8001f44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d06e      	beq.n	8002028 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d069      	beq.n	8002024 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f50:	4b53      	ldr	r3, [pc, #332]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f5c:	4b50      	ldr	r3, [pc, #320]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0ad      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f78:	f7ff f8ec 	bl	8001154 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f8e8 	bl	8001154 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e09a      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f92:	4b43      	ldr	r3, [pc, #268]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9e:	4b40      	ldr	r3, [pc, #256]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	4b40      	ldr	r3, [pc, #256]	@ (80020a4 <HAL_RCC_OscConfig+0x784>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fb8:	0212      	lsls	r2, r2, #8
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fc0:	0852      	lsrs	r2, r2, #1
 8001fc2:	3a01      	subs	r2, #1
 8001fc4:	0552      	lsls	r2, r2, #21
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fcc:	0852      	lsrs	r2, r2, #1
 8001fce:	3a01      	subs	r2, #1
 8001fd0:	0652      	lsls	r2, r2, #25
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fd8:	0912      	lsrs	r2, r2, #4
 8001fda:	0452      	lsls	r2, r2, #17
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	4930      	ldr	r1, [pc, #192]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ffa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ffc:	f7ff f8aa 	bl	8001154 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff f8a6 	bl	8001154 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e058      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002022:	e050      	b.n	80020c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e04f      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d148      	bne.n	80020c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002034:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002040:	4b17      	ldr	r3, [pc, #92]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a16      	ldr	r2, [pc, #88]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800204a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800204c:	f7ff f882 	bl	8001154 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff f87e 	bl	8001154 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e030      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x734>
 8002072:	e028      	b.n	80020c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d023      	beq.n	80020c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a08      	ldr	r2, [pc, #32]	@ (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002080:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff f865 	bl	8001154 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	e00c      	b.n	80020a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7ff f861 	bl	8001154 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d905      	bls.n	80020a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e013      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
 80020a0:	40021000 	.word	0x40021000
 80020a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <HAL_RCC_OscConfig+0x7b0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ec      	bne.n	800208e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_RCC_OscConfig+0x7b0>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	4905      	ldr	r1, [pc, #20]	@ (80020d0 <HAL_RCC_OscConfig+0x7b0>)
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_RCC_OscConfig+0x7b4>)
 80020bc:	4013      	ands	r3, r2
 80020be:	60cb      	str	r3, [r1, #12]
 80020c0:	e001      	b.n	80020c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	feeefffc 	.word	0xfeeefffc

080020d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0e7      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4b75      	ldr	r3, [pc, #468]	@ (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d910      	bls.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b72      	ldr	r3, [pc, #456]	@ (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4970      	ldr	r1, [pc, #448]	@ (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b6e      	ldr	r3, [pc, #440]	@ (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0cf      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d010      	beq.n	800214a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	4b66      	ldr	r3, [pc, #408]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002134:	429a      	cmp	r2, r3
 8002136:	d908      	bls.n	800214a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b63      	ldr	r3, [pc, #396]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4960      	ldr	r1, [pc, #384]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d04c      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	4b5a      	ldr	r3, [pc, #360]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d121      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0a6      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002176:	4b54      	ldr	r3, [pc, #336]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e09a      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218e:	4b4e      	ldr	r3, [pc, #312]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e08e      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219e:	4b4a      	ldr	r3, [pc, #296]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e086      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b46      	ldr	r3, [pc, #280]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4943      	ldr	r1, [pc, #268]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c0:	f7fe ffc8 	bl	8001154 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7fe ffc4 	bl	8001154 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e06e      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b3a      	ldr	r3, [pc, #232]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4b31      	ldr	r3, [pc, #196]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002208:	429a      	cmp	r2, r3
 800220a:	d208      	bcs.n	800221e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b2e      	ldr	r3, [pc, #184]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	492b      	ldr	r1, [pc, #172]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800221e:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d210      	bcs.n	800224e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222c:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 0207 	bic.w	r2, r3, #7
 8002234:	4923      	ldr	r1, [pc, #140]	@ (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223c:	4b21      	ldr	r3, [pc, #132]	@ (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e036      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225a:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4918      	ldr	r1, [pc, #96]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002278:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4910      	ldr	r1, [pc, #64]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800228c:	f000 f824 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	490b      	ldr	r1, [pc, #44]	@ (80022cc <HAL_RCC_ClockConfig+0x1f4>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <HAL_RCC_ClockConfig+0x1f8>)
 80022aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ac:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_RCC_ClockConfig+0x1fc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe feff 	bl	80010b4 <HAL_InitTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80022ba:	7afb      	ldrb	r3, [r7, #11]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08005b24 	.word	0x08005b24
 80022d0:	20000064 	.word	0x20000064
 80022d4:	20000068 	.word	0x20000068

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	@ 0x24
 80022dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e6:	4b3e      	ldr	r3, [pc, #248]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f0:	4b3b      	ldr	r3, [pc, #236]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x34>
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d121      	bne.n	800234a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d11e      	bne.n	800234a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800230c:	4b34      	ldr	r3, [pc, #208]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002318:	4b31      	ldr	r3, [pc, #196]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	e005      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002328:	4b2d      	ldr	r3, [pc, #180]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002334:	4a2b      	ldr	r2, [pc, #172]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10d      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b04      	cmp	r3, #4
 800234e:	d102      	bne.n	8002356 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002350:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	e004      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d101      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800235c:	4b23      	ldr	r3, [pc, #140]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x114>)
 800235e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d134      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002366:	4b1e      	ldr	r3, [pc, #120]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0xa6>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d003      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0xac>
 800237c:	e005      	b.n	800238a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002380:	617b      	str	r3, [r7, #20]
      break;
 8002382:	e005      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002386:	617b      	str	r3, [r7, #20]
      break;
 8002388:	e002      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	617b      	str	r3, [r7, #20]
      break;
 800238e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	3301      	adds	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	fb03 f202 	mul.w	r2, r3, r2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	0e5b      	lsrs	r3, r3, #25
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	3301      	adds	r3, #1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023d0:	69bb      	ldr	r3, [r7, #24]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08005b3c 	.word	0x08005b3c
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	007a1200 	.word	0x007a1200

080023f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000064 	.word	0x20000064

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800240c:	f7ff fff0 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4904      	ldr	r1, [pc, #16]	@ (8002430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	08005b34 	.word	0x08005b34

08002434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002438:	f7ff ffda 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0adb      	lsrs	r3, r3, #11
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4904      	ldr	r1, [pc, #16]	@ (800245c <HAL_RCC_GetPCLK2Freq+0x28>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	08005b34 	.word	0x08005b34

08002460 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800246c:	4b2a      	ldr	r3, [pc, #168]	@ (8002518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002478:	f7ff f9ee 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 800247c:	6178      	str	r0, [r7, #20]
 800247e:	e014      	b.n	80024aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002480:	4b25      	ldr	r3, [pc, #148]	@ (8002518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002484:	4a24      	ldr	r2, [pc, #144]	@ (8002518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248a:	6593      	str	r3, [r2, #88]	@ 0x58
 800248c:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002498:	f7ff f9de 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 800249c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800249e:	4b1e      	ldr	r3, [pc, #120]	@ (8002518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024b0:	d10b      	bne.n	80024ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b80      	cmp	r3, #128	@ 0x80
 80024b6:	d919      	bls.n	80024ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80024bc:	d902      	bls.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024be:	2302      	movs	r3, #2
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	e013      	b.n	80024ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c4:	2301      	movs	r3, #1
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	e010      	b.n	80024ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b80      	cmp	r3, #128	@ 0x80
 80024ce:	d902      	bls.n	80024d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024d0:	2303      	movs	r3, #3
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	e00a      	b.n	80024ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b80      	cmp	r3, #128	@ 0x80
 80024da:	d102      	bne.n	80024e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024dc:	2302      	movs	r3, #2
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	e004      	b.n	80024ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b70      	cmp	r3, #112	@ 0x70
 80024e6:	d101      	bne.n	80024ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024e8:	2301      	movs	r3, #1
 80024ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 0207 	bic.w	r2, r3, #7
 80024f4:	4909      	ldr	r1, [pc, #36]	@ (800251c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024fc:	4b07      	ldr	r3, [pc, #28]	@ (800251c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000
 800251c:	40022000 	.word	0x40022000

08002520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002528:	2300      	movs	r3, #0
 800252a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800252c:	2300      	movs	r3, #0
 800252e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002538:	2b00      	cmp	r3, #0
 800253a:	d041      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002540:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002544:	d02a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002546:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800254a:	d824      	bhi.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800254c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002550:	d008      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002552:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002556:	d81e      	bhi.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800255c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002560:	d010      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002562:	e018      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002564:	4b86      	ldr	r3, [pc, #536]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a85      	ldr	r2, [pc, #532]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002570:	e015      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fabb 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002582:	e00c      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3320      	adds	r3, #32
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fba6 	bl	8002cdc <RCCEx_PLLSAI2_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002594:	e003      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	74fb      	strb	r3, [r7, #19]
      break;
 800259a:	e000      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800259c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a4:	4b76      	ldr	r3, [pc, #472]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025b2:	4973      	ldr	r1, [pc, #460]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025ba:	e001      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d041      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025d4:	d02a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025da:	d824      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025e6:	d81e      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f0:	d010      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025f2:	e018      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f4:	4b62      	ldr	r3, [pc, #392]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a61      	ldr	r2, [pc, #388]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002600:	e015      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fa73 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002612:	e00c      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3320      	adds	r3, #32
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fb5e 	bl	8002cdc <RCCEx_PLLSAI2_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002624:	e003      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	74fb      	strb	r3, [r7, #19]
      break;
 800262a:	e000      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800262c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10b      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002634:	4b52      	ldr	r3, [pc, #328]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002642:	494f      	ldr	r1, [pc, #316]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800264a:	e001      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80a0 	beq.w	800279e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002662:	4b47      	ldr	r3, [pc, #284]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00d      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002678:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	4a40      	ldr	r2, [pc, #256]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002682:	6593      	str	r3, [r2, #88]	@ 0x58
 8002684:	4b3e      	ldr	r3, [pc, #248]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002690:	2301      	movs	r3, #1
 8002692:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002694:	4b3b      	ldr	r3, [pc, #236]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a3a      	ldr	r2, [pc, #232]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a0:	f7fe fd58 	bl	8001154 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026a6:	e009      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a8:	f7fe fd54 	bl	8001154 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d902      	bls.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	74fb      	strb	r3, [r7, #19]
        break;
 80026ba:	e005      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026bc:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ef      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d15c      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01f      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d019      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ec:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f8:	4b21      	ldr	r3, [pc, #132]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	4a20      	ldr	r2, [pc, #128]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002708:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a1c      	ldr	r2, [pc, #112]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002718:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fd13 	bl	8001154 <HAL_GetTick>
 800272e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002730:	e00b      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fd0f 	bl	8001154 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d902      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	74fb      	strb	r3, [r7, #19]
            break;
 8002748:	e006      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274a:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ec      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800275e:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800276e:	4904      	ldr	r1, [pc, #16]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002776:	e009      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	74bb      	strb	r3, [r7, #18]
 800277c:	e006      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278c:	7c7b      	ldrb	r3, [r7, #17]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4b9e      	ldr	r3, [pc, #632]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	4a9d      	ldr	r2, [pc, #628]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800279c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027aa:	4b98      	ldr	r3, [pc, #608]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	f023 0203 	bic.w	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b8:	4994      	ldr	r1, [pc, #592]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027cc:	4b8f      	ldr	r3, [pc, #572]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d2:	f023 020c 	bic.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027da:	498c      	ldr	r1, [pc, #560]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ee:	4b87      	ldr	r3, [pc, #540]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	4983      	ldr	r1, [pc, #524]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002810:	4b7e      	ldr	r3, [pc, #504]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	497b      	ldr	r1, [pc, #492]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002832:	4b76      	ldr	r3, [pc, #472]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002838:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002840:	4972      	ldr	r1, [pc, #456]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002854:	4b6d      	ldr	r3, [pc, #436]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	496a      	ldr	r1, [pc, #424]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002876:	4b65      	ldr	r3, [pc, #404]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	4961      	ldr	r1, [pc, #388]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002898:	4b5c      	ldr	r3, [pc, #368]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a6:	4959      	ldr	r1, [pc, #356]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ba:	4b54      	ldr	r3, [pc, #336]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c8:	4950      	ldr	r1, [pc, #320]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028dc:	4b4b      	ldr	r3, [pc, #300]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ea:	4948      	ldr	r1, [pc, #288]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028fe:	4b43      	ldr	r3, [pc, #268]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290c:	493f      	ldr	r1, [pc, #252]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d028      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002920:	4b3a      	ldr	r3, [pc, #232]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800292e:	4937      	ldr	r1, [pc, #220]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800293a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800293e:	d106      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002940:	4b32      	ldr	r3, [pc, #200]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a31      	ldr	r2, [pc, #196]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800294a:	60d3      	str	r3, [r2, #12]
 800294c:	e011      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002952:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002956:	d10c      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f8c8 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d028      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800297e:	4b23      	ldr	r3, [pc, #140]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002984:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298c:	491f      	ldr	r1, [pc, #124]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800299c:	d106      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029a8:	60d3      	str	r3, [r2, #12]
 80029aa:	e011      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2101      	movs	r1, #1
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f899 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d02b      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029fa:	d109      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a02      	ldr	r2, [pc, #8]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
 8002a08:	e014      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f867 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02f      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a40:	4b2b      	ldr	r3, [pc, #172]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a4e:	4928      	ldr	r1, [pc, #160]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a5e:	d10d      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	2102      	movs	r1, #2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f844 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d014      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	74bb      	strb	r3, [r7, #18]
 8002a7a:	e011      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3320      	adds	r3, #32
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f925 	bl	8002cdc <RCCEx_PLLSAI2_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002aac:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aba:	490d      	ldr	r1, [pc, #52]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ace:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ade:	4904      	ldr	r1, [pc, #16]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ae6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000

08002af4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b02:	4b75      	ldr	r3, [pc, #468]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b0e:	4b72      	ldr	r3, [pc, #456]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d10d      	bne.n	8002b3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
       ||
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b26:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
       ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d047      	beq.n	8002bca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	e044      	b.n	8002bca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d018      	beq.n	8002b7a <RCCEx_PLLSAI1_Config+0x86>
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d825      	bhi.n	8002b98 <RCCEx_PLLSAI1_Config+0xa4>
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d002      	beq.n	8002b56 <RCCEx_PLLSAI1_Config+0x62>
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d009      	beq.n	8002b68 <RCCEx_PLLSAI1_Config+0x74>
 8002b54:	e020      	b.n	8002b98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b56:	4b60      	ldr	r3, [pc, #384]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11d      	bne.n	8002b9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b66:	e01a      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b68:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d116      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b78:	e013      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b7a:	4b57      	ldr	r3, [pc, #348]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b86:	4b54      	ldr	r3, [pc, #336]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b96:	e006      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9c:	e004      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e002      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ba6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bae:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	4944      	ldr	r1, [pc, #272]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d17d      	bne.n	8002ccc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bd0:	4b41      	ldr	r3, [pc, #260]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a40      	ldr	r2, [pc, #256]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe faba 	bl	8001154 <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002be2:	e009      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be4:	f7fe fab6 	bl	8001154 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d902      	bls.n	8002bf8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bf6:	e005      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf8:	4b37      	ldr	r3, [pc, #220]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ef      	bne.n	8002be4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d160      	bne.n	8002ccc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d111      	bne.n	8002c34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c10:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6892      	ldr	r2, [r2, #8]
 8002c20:	0211      	lsls	r1, r2, #8
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68d2      	ldr	r2, [r2, #12]
 8002c26:	0912      	lsrs	r2, r2, #4
 8002c28:	0452      	lsls	r2, r2, #17
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	492a      	ldr	r1, [pc, #168]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	610b      	str	r3, [r1, #16]
 8002c32:	e027      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d112      	bne.n	8002c60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c3a:	4b27      	ldr	r3, [pc, #156]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6892      	ldr	r2, [r2, #8]
 8002c4a:	0211      	lsls	r1, r2, #8
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6912      	ldr	r2, [r2, #16]
 8002c50:	0852      	lsrs	r2, r2, #1
 8002c52:	3a01      	subs	r2, #1
 8002c54:	0552      	lsls	r2, r2, #21
 8002c56:	430a      	orrs	r2, r1
 8002c58:	491f      	ldr	r1, [pc, #124]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	610b      	str	r3, [r1, #16]
 8002c5e:	e011      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c60:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6892      	ldr	r2, [r2, #8]
 8002c70:	0211      	lsls	r1, r2, #8
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6952      	ldr	r2, [r2, #20]
 8002c76:	0852      	lsrs	r2, r2, #1
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0652      	lsls	r2, r2, #25
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	4916      	ldr	r1, [pc, #88]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c84:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a13      	ldr	r2, [pc, #76]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fe fa60 	bl	8001154 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c96:	e009      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c98:	f7fe fa5c 	bl	8001154 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	73fb      	strb	r3, [r7, #15]
          break;
 8002caa:	e005      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ef      	beq.n	8002c98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4904      	ldr	r1, [pc, #16]	@ (8002cd8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000

08002cdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cea:	4b6a      	ldr	r3, [pc, #424]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d018      	beq.n	8002d28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cf6:	4b67      	ldr	r3, [pc, #412]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0203 	and.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d10d      	bne.n	8002d22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
       ||
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d0e:	4b61      	ldr	r3, [pc, #388]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d047      	beq.n	8002db2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e044      	b.n	8002db2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d018      	beq.n	8002d62 <RCCEx_PLLSAI2_Config+0x86>
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d825      	bhi.n	8002d80 <RCCEx_PLLSAI2_Config+0xa4>
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d002      	beq.n	8002d3e <RCCEx_PLLSAI2_Config+0x62>
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d009      	beq.n	8002d50 <RCCEx_PLLSAI2_Config+0x74>
 8002d3c:	e020      	b.n	8002d80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d3e:	4b55      	ldr	r3, [pc, #340]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11d      	bne.n	8002d86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4e:	e01a      	b.n	8002d86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d50:	4b50      	ldr	r3, [pc, #320]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d116      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d60:	e013      	b.n	8002d8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d62:	4b4c      	ldr	r3, [pc, #304]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d6e:	4b49      	ldr	r3, [pc, #292]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d7e:	e006      	b.n	8002d8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	e004      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d96:	4b3f      	ldr	r3, [pc, #252]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	430b      	orrs	r3, r1
 8002dac:	4939      	ldr	r1, [pc, #228]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d167      	bne.n	8002e88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002db8:	4b36      	ldr	r3, [pc, #216]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fe f9c6 	bl	8001154 <HAL_GetTick>
 8002dc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dca:	e009      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dcc:	f7fe f9c2 	bl	8001154 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d902      	bls.n	8002de0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	73fb      	strb	r3, [r7, #15]
        break;
 8002dde:	e005      	b.n	8002dec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002de0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ef      	bne.n	8002dcc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d14a      	bne.n	8002e88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d111      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002df8:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6892      	ldr	r2, [r2, #8]
 8002e08:	0211      	lsls	r1, r2, #8
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68d2      	ldr	r2, [r2, #12]
 8002e0e:	0912      	lsrs	r2, r2, #4
 8002e10:	0452      	lsls	r2, r2, #17
 8002e12:	430a      	orrs	r2, r1
 8002e14:	491f      	ldr	r1, [pc, #124]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	614b      	str	r3, [r1, #20]
 8002e1a:	e011      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6892      	ldr	r2, [r2, #8]
 8002e2c:	0211      	lsls	r1, r2, #8
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6912      	ldr	r2, [r2, #16]
 8002e32:	0852      	lsrs	r2, r2, #1
 8002e34:	3a01      	subs	r2, #1
 8002e36:	0652      	lsls	r2, r2, #25
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	4916      	ldr	r1, [pc, #88]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e40:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a13      	ldr	r2, [pc, #76]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7fe f982 	bl	8001154 <HAL_GetTick>
 8002e50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e52:	e009      	b.n	8002e68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e54:	f7fe f97e 	bl	8001154 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d902      	bls.n	8002e68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	73fb      	strb	r3, [r7, #15]
          break;
 8002e66:	e005      	b.n	8002e74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e68:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ef      	beq.n	8002e54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4904      	ldr	r1, [pc, #16]	@ (8002e94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e049      	b.n	8002f3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd ff4c 	bl	8000d5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f000 fba4 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_TIM_PWM_Start+0x24>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e03c      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x9e>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d109      	bne.n	8002f86 <HAL_TIM_PWM_Start+0x3e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	bf14      	ite	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	2300      	moveq	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e02f      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x9e>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d109      	bne.n	8002fa0 <HAL_TIM_PWM_Start+0x58>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e022      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x9e>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d109      	bne.n	8002fba <HAL_TIM_PWM_Start+0x72>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e015      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x9e>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d109      	bne.n	8002fd4 <HAL_TIM_PWM_Start+0x8c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e008      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x9e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e09c      	b.n	8003128 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_PWM_Start+0xb6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ffc:	e023      	b.n	8003046 <HAL_TIM_PWM_Start+0xfe>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d104      	bne.n	800300e <HAL_TIM_PWM_Start+0xc6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800300c:	e01b      	b.n	8003046 <HAL_TIM_PWM_Start+0xfe>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d104      	bne.n	800301e <HAL_TIM_PWM_Start+0xd6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800301c:	e013      	b.n	8003046 <HAL_TIM_PWM_Start+0xfe>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b0c      	cmp	r3, #12
 8003022:	d104      	bne.n	800302e <HAL_TIM_PWM_Start+0xe6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800302c:	e00b      	b.n	8003046 <HAL_TIM_PWM_Start+0xfe>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b10      	cmp	r3, #16
 8003032:	d104      	bne.n	800303e <HAL_TIM_PWM_Start+0xf6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800303c:	e003      	b.n	8003046 <HAL_TIM_PWM_Start+0xfe>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2202      	movs	r2, #2
 8003042:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fe64 	bl	8003d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a35      	ldr	r2, [pc, #212]	@ (8003130 <HAL_TIM_PWM_Start+0x1e8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_TIM_PWM_Start+0x13e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a34      	ldr	r2, [pc, #208]	@ (8003134 <HAL_TIM_PWM_Start+0x1ec>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00e      	beq.n	8003086 <HAL_TIM_PWM_Start+0x13e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a32      	ldr	r2, [pc, #200]	@ (8003138 <HAL_TIM_PWM_Start+0x1f0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_TIM_PWM_Start+0x13e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a31      	ldr	r2, [pc, #196]	@ (800313c <HAL_TIM_PWM_Start+0x1f4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_TIM_PWM_Start+0x13e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2f      	ldr	r2, [pc, #188]	@ (8003140 <HAL_TIM_PWM_Start+0x1f8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_TIM_PWM_Start+0x142>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_TIM_PWM_Start+0x144>
 800308a:	2300      	movs	r3, #0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800309e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a22      	ldr	r2, [pc, #136]	@ (8003130 <HAL_TIM_PWM_Start+0x1e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01d      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x19e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b2:	d018      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x19e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <HAL_TIM_PWM_Start+0x1fc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x19e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a21      	ldr	r2, [pc, #132]	@ (8003148 <HAL_TIM_PWM_Start+0x200>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x19e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	@ (800314c <HAL_TIM_PWM_Start+0x204>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x19e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_TIM_PWM_Start+0x1ec>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x19e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <HAL_TIM_PWM_Start+0x1f0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d115      	bne.n	8003112 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b18      	ldr	r3, [pc, #96]	@ (8003150 <HAL_TIM_PWM_Start+0x208>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d015      	beq.n	8003124 <HAL_TIM_PWM_Start+0x1dc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030fe:	d011      	beq.n	8003124 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003110:	e008      	b.n	8003124 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e000      	b.n	8003126 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003124:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40013400 	.word	0x40013400
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800
 800314c:	40000c00 	.word	0x40000c00
 8003150:	00010007 	.word	0x00010007

08003154 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e097      	b.n	8003298 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fd fdad 	bl	8000cdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003198:	f023 0307 	bic.w	r3, r3, #7
 800319c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f000 fa3b 	bl	8003624 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	4313      	orrs	r3, r2
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80031f4:	f023 030c 	bic.w	r3, r3, #12
 80031f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003200:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	4313      	orrs	r3, r2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	011a      	lsls	r2, r3, #4
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	031b      	lsls	r3, r3, #12
 8003224:	4313      	orrs	r3, r2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003232:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	4313      	orrs	r3, r2
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d110      	bne.n	80032f2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032d6:	7b7b      	ldrb	r3, [r7, #13]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d001      	beq.n	80032e0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e089      	b.n	80033f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f0:	e031      	b.n	8003356 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d110      	bne.n	800331a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032f8:	7bbb      	ldrb	r3, [r7, #14]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032fe:	7b3b      	ldrb	r3, [r7, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d001      	beq.n	8003308 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e075      	b.n	80033f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003318:	e01d      	b.n	8003356 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d108      	bne.n	8003332 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003320:	7bbb      	ldrb	r3, [r7, #14]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003326:	7b7b      	ldrb	r3, [r7, #13]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d102      	bne.n	8003332 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800332c:	7b3b      	ldrb	r3, [r7, #12]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d001      	beq.n	8003336 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e05e      	b.n	80033f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_TIM_Encoder_Start_IT+0xc4>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b04      	cmp	r3, #4
 8003360:	d010      	beq.n	8003384 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003362:	e01f      	b.n	80033a4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2201      	movs	r2, #1
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fcd5 	bl	8003d1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0202 	orr.w	r2, r2, #2
 8003380:	60da      	str	r2, [r3, #12]
      break;
 8003382:	e02e      	b.n	80033e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2201      	movs	r2, #1
 800338a:	2104      	movs	r1, #4
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fcc5 	bl	8003d1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0204 	orr.w	r2, r2, #4
 80033a0:	60da      	str	r2, [r3, #12]
      break;
 80033a2:	e01e      	b.n	80033e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2201      	movs	r2, #1
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fcb5 	bl	8003d1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2201      	movs	r2, #1
 80033b8:	2104      	movs	r1, #4
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fcae 	bl	8003d1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0202 	orr.w	r2, r2, #2
 80033ce:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0204 	orr.w	r2, r2, #4
 80033de:	60da      	str	r2, [r3, #12]
      break;
 80033e0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003416:	2302      	movs	r3, #2
 8003418:	e0ff      	b.n	800361a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b14      	cmp	r3, #20
 8003426:	f200 80f0 	bhi.w	800360a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800342a:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800342c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003430:	08003485 	.word	0x08003485
 8003434:	0800360b 	.word	0x0800360b
 8003438:	0800360b 	.word	0x0800360b
 800343c:	0800360b 	.word	0x0800360b
 8003440:	080034c5 	.word	0x080034c5
 8003444:	0800360b 	.word	0x0800360b
 8003448:	0800360b 	.word	0x0800360b
 800344c:	0800360b 	.word	0x0800360b
 8003450:	08003507 	.word	0x08003507
 8003454:	0800360b 	.word	0x0800360b
 8003458:	0800360b 	.word	0x0800360b
 800345c:	0800360b 	.word	0x0800360b
 8003460:	08003547 	.word	0x08003547
 8003464:	0800360b 	.word	0x0800360b
 8003468:	0800360b 	.word	0x0800360b
 800346c:	0800360b 	.word	0x0800360b
 8003470:	08003589 	.word	0x08003589
 8003474:	0800360b 	.word	0x0800360b
 8003478:	0800360b 	.word	0x0800360b
 800347c:	0800360b 	.word	0x0800360b
 8003480:	080035c9 	.word	0x080035c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f970 	bl	8003770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0208 	orr.w	r2, r2, #8
 800349e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0204 	bic.w	r2, r2, #4
 80034ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6999      	ldr	r1, [r3, #24]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	619a      	str	r2, [r3, #24]
      break;
 80034c2:	e0a5      	b.n	8003610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f9e0 	bl	8003890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6999      	ldr	r1, [r3, #24]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	021a      	lsls	r2, r3, #8
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	619a      	str	r2, [r3, #24]
      break;
 8003504:	e084      	b.n	8003610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fa49 	bl	80039a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0208 	orr.w	r2, r2, #8
 8003520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0204 	bic.w	r2, r2, #4
 8003530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69d9      	ldr	r1, [r3, #28]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	61da      	str	r2, [r3, #28]
      break;
 8003544:	e064      	b.n	8003610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fab1 	bl	8003ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69d9      	ldr	r1, [r3, #28]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	021a      	lsls	r2, r3, #8
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	61da      	str	r2, [r3, #28]
      break;
 8003586:	e043      	b.n	8003610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fafa 	bl	8003b88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0208 	orr.w	r2, r2, #8
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0204 	bic.w	r2, r2, #4
 80035b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035c6:	e023      	b.n	8003610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fb3e 	bl	8003c50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	021a      	lsls	r2, r3, #8
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003608:	e002      	b.n	8003610 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
      break;
 800360e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003618:	7dfb      	ldrb	r3, [r7, #23]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop

08003624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a46      	ldr	r2, [pc, #280]	@ (8003750 <TIM_Base_SetConfig+0x12c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003642:	d00f      	beq.n	8003664 <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a43      	ldr	r2, [pc, #268]	@ (8003754 <TIM_Base_SetConfig+0x130>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00b      	beq.n	8003664 <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a42      	ldr	r2, [pc, #264]	@ (8003758 <TIM_Base_SetConfig+0x134>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a41      	ldr	r2, [pc, #260]	@ (800375c <TIM_Base_SetConfig+0x138>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_Base_SetConfig+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a40      	ldr	r2, [pc, #256]	@ (8003760 <TIM_Base_SetConfig+0x13c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d108      	bne.n	8003676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800366a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a35      	ldr	r2, [pc, #212]	@ (8003750 <TIM_Base_SetConfig+0x12c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01f      	beq.n	80036be <TIM_Base_SetConfig+0x9a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003684:	d01b      	beq.n	80036be <TIM_Base_SetConfig+0x9a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <TIM_Base_SetConfig+0x130>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d017      	beq.n	80036be <TIM_Base_SetConfig+0x9a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a31      	ldr	r2, [pc, #196]	@ (8003758 <TIM_Base_SetConfig+0x134>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <TIM_Base_SetConfig+0x9a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a30      	ldr	r2, [pc, #192]	@ (800375c <TIM_Base_SetConfig+0x138>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00f      	beq.n	80036be <TIM_Base_SetConfig+0x9a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003760 <TIM_Base_SetConfig+0x13c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <TIM_Base_SetConfig+0x9a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003764 <TIM_Base_SetConfig+0x140>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <TIM_Base_SetConfig+0x9a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <TIM_Base_SetConfig+0x144>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_Base_SetConfig+0x9a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2c      	ldr	r2, [pc, #176]	@ (800376c <TIM_Base_SetConfig+0x148>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a16      	ldr	r2, [pc, #88]	@ (8003750 <TIM_Base_SetConfig+0x12c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00f      	beq.n	800371c <TIM_Base_SetConfig+0xf8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <TIM_Base_SetConfig+0x13c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00b      	beq.n	800371c <TIM_Base_SetConfig+0xf8>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a17      	ldr	r2, [pc, #92]	@ (8003764 <TIM_Base_SetConfig+0x140>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d007      	beq.n	800371c <TIM_Base_SetConfig+0xf8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a16      	ldr	r2, [pc, #88]	@ (8003768 <TIM_Base_SetConfig+0x144>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d003      	beq.n	800371c <TIM_Base_SetConfig+0xf8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a15      	ldr	r2, [pc, #84]	@ (800376c <TIM_Base_SetConfig+0x148>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d103      	bne.n	8003724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f023 0201 	bic.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	611a      	str	r2, [r3, #16]
  }
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40000c00 	.word	0x40000c00
 8003760:	40013400 	.word	0x40013400
 8003764:	40014000 	.word	0x40014000
 8003768:	40014400 	.word	0x40014400
 800376c:	40014800 	.word	0x40014800

08003770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f023 0201 	bic.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a2c      	ldr	r2, [pc, #176]	@ (800387c <TIM_OC1_SetConfig+0x10c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00f      	beq.n	80037f0 <TIM_OC1_SetConfig+0x80>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003880 <TIM_OC1_SetConfig+0x110>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <TIM_OC1_SetConfig+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a2a      	ldr	r2, [pc, #168]	@ (8003884 <TIM_OC1_SetConfig+0x114>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <TIM_OC1_SetConfig+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a29      	ldr	r2, [pc, #164]	@ (8003888 <TIM_OC1_SetConfig+0x118>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_OC1_SetConfig+0x80>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a28      	ldr	r2, [pc, #160]	@ (800388c <TIM_OC1_SetConfig+0x11c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10c      	bne.n	800380a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0308 	bic.w	r3, r3, #8
 80037f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1b      	ldr	r2, [pc, #108]	@ (800387c <TIM_OC1_SetConfig+0x10c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00f      	beq.n	8003832 <TIM_OC1_SetConfig+0xc2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1a      	ldr	r2, [pc, #104]	@ (8003880 <TIM_OC1_SetConfig+0x110>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00b      	beq.n	8003832 <TIM_OC1_SetConfig+0xc2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a19      	ldr	r2, [pc, #100]	@ (8003884 <TIM_OC1_SetConfig+0x114>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <TIM_OC1_SetConfig+0xc2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <TIM_OC1_SetConfig+0x118>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_OC1_SetConfig+0xc2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a17      	ldr	r2, [pc, #92]	@ (800388c <TIM_OC1_SetConfig+0x11c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d111      	bne.n	8003856 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	621a      	str	r2, [r3, #32]
}
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40013400 	.word	0x40013400
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800

08003890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 0210 	bic.w	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0320 	bic.w	r3, r3, #32
 80038de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a28      	ldr	r2, [pc, #160]	@ (8003990 <TIM_OC2_SetConfig+0x100>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_OC2_SetConfig+0x6c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a27      	ldr	r2, [pc, #156]	@ (8003994 <TIM_OC2_SetConfig+0x104>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10d      	bne.n	8003918 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a1d      	ldr	r2, [pc, #116]	@ (8003990 <TIM_OC2_SetConfig+0x100>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00f      	beq.n	8003940 <TIM_OC2_SetConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a1c      	ldr	r2, [pc, #112]	@ (8003994 <TIM_OC2_SetConfig+0x104>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00b      	beq.n	8003940 <TIM_OC2_SetConfig+0xb0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1b      	ldr	r2, [pc, #108]	@ (8003998 <TIM_OC2_SetConfig+0x108>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d007      	beq.n	8003940 <TIM_OC2_SetConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a1a      	ldr	r2, [pc, #104]	@ (800399c <TIM_OC2_SetConfig+0x10c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_OC2_SetConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a19      	ldr	r2, [pc, #100]	@ (80039a0 <TIM_OC2_SetConfig+0x110>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d113      	bne.n	8003968 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800394e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40013400 	.word	0x40013400
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800

080039a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <TIM_OC3_SetConfig+0xfc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_OC3_SetConfig+0x6a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a26      	ldr	r2, [pc, #152]	@ (8003aa4 <TIM_OC3_SetConfig+0x100>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10d      	bne.n	8003a2a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <TIM_OC3_SetConfig+0xfc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00f      	beq.n	8003a52 <TIM_OC3_SetConfig+0xae>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa4 <TIM_OC3_SetConfig+0x100>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <TIM_OC3_SetConfig+0xae>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa8 <TIM_OC3_SetConfig+0x104>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <TIM_OC3_SetConfig+0xae>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a19      	ldr	r2, [pc, #100]	@ (8003aac <TIM_OC3_SetConfig+0x108>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_OC3_SetConfig+0xae>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	@ (8003ab0 <TIM_OC3_SetConfig+0x10c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d113      	bne.n	8003a7a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40013400 	.word	0x40013400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40014400 	.word	0x40014400
 8003ab0:	40014800 	.word	0x40014800

08003ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	031b      	lsls	r3, r3, #12
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a18      	ldr	r2, [pc, #96]	@ (8003b74 <TIM_OC4_SetConfig+0xc0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00f      	beq.n	8003b38 <TIM_OC4_SetConfig+0x84>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a17      	ldr	r2, [pc, #92]	@ (8003b78 <TIM_OC4_SetConfig+0xc4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00b      	beq.n	8003b38 <TIM_OC4_SetConfig+0x84>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <TIM_OC4_SetConfig+0xc8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <TIM_OC4_SetConfig+0x84>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a15      	ldr	r2, [pc, #84]	@ (8003b80 <TIM_OC4_SetConfig+0xcc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_OC4_SetConfig+0x84>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a14      	ldr	r2, [pc, #80]	@ (8003b84 <TIM_OC4_SetConfig+0xd0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d109      	bne.n	8003b4c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	019b      	lsls	r3, r3, #6
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40013400 	.word	0x40013400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800

08003b88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003bcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	@ (8003c3c <TIM_OC5_SetConfig+0xb4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00f      	beq.n	8003c02 <TIM_OC5_SetConfig+0x7a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a16      	ldr	r2, [pc, #88]	@ (8003c40 <TIM_OC5_SetConfig+0xb8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_OC5_SetConfig+0x7a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a15      	ldr	r2, [pc, #84]	@ (8003c44 <TIM_OC5_SetConfig+0xbc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_OC5_SetConfig+0x7a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a14      	ldr	r2, [pc, #80]	@ (8003c48 <TIM_OC5_SetConfig+0xc0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC5_SetConfig+0x7a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a13      	ldr	r2, [pc, #76]	@ (8003c4c <TIM_OC5_SetConfig+0xc4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d109      	bne.n	8003c16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800

08003c50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	051b      	lsls	r3, r3, #20
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a18      	ldr	r2, [pc, #96]	@ (8003d08 <TIM_OC6_SetConfig+0xb8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00f      	beq.n	8003ccc <TIM_OC6_SetConfig+0x7c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a17      	ldr	r2, [pc, #92]	@ (8003d0c <TIM_OC6_SetConfig+0xbc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <TIM_OC6_SetConfig+0x7c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <TIM_OC6_SetConfig+0xc0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_OC6_SetConfig+0x7c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <TIM_OC6_SetConfig+0xc4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_OC6_SetConfig+0x7c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a14      	ldr	r2, [pc, #80]	@ (8003d18 <TIM_OC6_SetConfig+0xc8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d109      	bne.n	8003ce0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	029b      	lsls	r3, r3, #10
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800

08003d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2201      	movs	r2, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1a      	ldr	r2, [r3, #32]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	401a      	ands	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1a      	ldr	r2, [r3, #32]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	431a      	orrs	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e068      	b.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2e      	ldr	r2, [pc, #184]	@ (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2d      	ldr	r2, [pc, #180]	@ (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01d      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df2:	d018      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1b      	ldr	r2, [pc, #108]	@ (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1a      	ldr	r2, [pc, #104]	@ (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a14      	ldr	r2, [pc, #80]	@ (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10c      	bne.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40013400 	.word	0x40013400
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	40000c00 	.word	0x40000c00
 8003e74:	40014000 	.word	0x40014000

08003e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e040      	b.n	8003f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fc ffb6 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	@ 0x24
 8003ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fe5a 	bl	8004b78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fb9f 	bl	8004608 <UART_SetConfig>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e01b      	b.n	8003f0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fed9 	bl	8004cbc <UART_CheckIdleState>
 8003f0a:	4603      	mov	r3, r0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b08b      	sub	sp, #44	@ 0x2c
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d147      	bne.n	8003fba <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_UART_Transmit_IT+0x22>
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e040      	b.n	8003fbc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	88fa      	ldrh	r2, [r7, #6]
 8003f44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2221      	movs	r2, #33	@ 0x21
 8003f62:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f6c:	d107      	bne.n	8003f7e <HAL_UART_Transmit_IT+0x6a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d103      	bne.n	8003f7e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4a13      	ldr	r2, [pc, #76]	@ (8003fc8 <HAL_UART_Transmit_IT+0xb4>)
 8003f7a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003f7c:	e002      	b.n	8003f84 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <HAL_UART_Transmit_IT+0xb8>)
 8003f82:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	613b      	str	r3, [r7, #16]
   return(result);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	623b      	str	r3, [r7, #32]
 8003fa4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	69f9      	ldr	r1, [r7, #28]
 8003fa8:	6a3a      	ldr	r2, [r7, #32]
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e6      	bne.n	8003f84 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003fba:	2302      	movs	r3, #2
  }
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	372c      	adds	r7, #44	@ 0x2c
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	08005091 	.word	0x08005091
 8003fcc:	08004fdb 	.word	0x08004fdb

08003fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b0ba      	sub	sp, #232	@ 0xe8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ff6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ffa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ffe:	4013      	ands	r3, r2
 8004000:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d115      	bne.n	8004038 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800400c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00f      	beq.n	8004038 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 82ca 	beq.w	80045c2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
      }
      return;
 8004036:	e2c4      	b.n	80045c2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8117 	beq.w	8004270 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800404e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004052:	4b85      	ldr	r3, [pc, #532]	@ (8004268 <HAL_UART_IRQHandler+0x298>)
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 810a 	beq.w	8004270 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d011      	beq.n	800408c <HAL_UART_IRQHandler+0xbc>
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800406c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2201      	movs	r2, #1
 800407a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <HAL_UART_IRQHandler+0xec>
 8004098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2202      	movs	r2, #2
 80040aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d011      	beq.n	80040ec <HAL_UART_IRQHandler+0x11c>
 80040c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00b      	beq.n	80040ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2204      	movs	r2, #4
 80040da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e2:	f043 0202 	orr.w	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d017      	beq.n	8004128 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004108:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00b      	beq.n	8004128 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2208      	movs	r2, #8
 8004116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800411e:	f043 0208 	orr.w	r2, r3, #8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004130:	2b00      	cmp	r3, #0
 8004132:	d012      	beq.n	800415a <HAL_UART_IRQHandler+0x18a>
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004138:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8230 	beq.w	80045c6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00d      	beq.n	800418e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004194:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a2:	2b40      	cmp	r3, #64	@ 0x40
 80041a4:	d005      	beq.n	80041b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04f      	beq.n	8004252 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fe97 	bl	8004ee6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d141      	bne.n	800424a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3308      	adds	r3, #8
 80041cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800420a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1d9      	bne.n	80041c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004216:	2b00      	cmp	r3, #0
 8004218:	d013      	beq.n	8004242 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421e:	4a13      	ldr	r2, [pc, #76]	@ (800426c <HAL_UART_IRQHandler+0x29c>)
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004226:	4618      	mov	r0, r3
 8004228:	f7fd f913 	bl	8001452 <HAL_DMA_Abort_IT>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d017      	beq.n	8004262 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800423c:	4610      	mov	r0, r2
 800423e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	e00f      	b.n	8004262 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9ca 	bl	80045dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	e00b      	b.n	8004262 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f9c6 	bl	80045dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	e007      	b.n	8004262 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9c2 	bl	80045dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004260:	e1b1      	b.n	80045c6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004262:	bf00      	nop
    return;
 8004264:	e1af      	b.n	80045c6 <HAL_UART_IRQHandler+0x5f6>
 8004266:	bf00      	nop
 8004268:	04000120 	.word	0x04000120
 800426c:	08004faf 	.word	0x08004faf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004274:	2b01      	cmp	r3, #1
 8004276:	f040 816a 	bne.w	800454e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800427a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8163 	beq.w	800454e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 815c 	beq.w	800454e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2210      	movs	r2, #16
 800429c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	f040 80d4 	bne.w	8004456 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80ad 	beq.w	800441e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042ce:	429a      	cmp	r2, r3
 80042d0:	f080 80a5 	bcs.w	800441e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 8086 	bne.w	80043fc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004304:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800430c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800431a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800431e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004326:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004332:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1da      	bne.n	80042f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3308      	adds	r3, #8
 8004340:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800434a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800435e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004362:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004366:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e1      	bne.n	800433a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800438c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800439a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800439c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e3      	bne.n	8004376 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043cc:	f023 0310 	bic.w	r3, r3, #16
 80043d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e4      	bne.n	80043bc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fc ffed 	bl	80013d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800440e:	b29b      	uxth	r3, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	b29b      	uxth	r3, r3
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8ea 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800441c:	e0d5      	b.n	80045ca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004424:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004428:	429a      	cmp	r2, r3
 800442a:	f040 80ce 	bne.w	80045ca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 80c5 	bne.w	80045ca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f8ce 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
      return;
 8004454:	e0b9      	b.n	80045ca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004462:	b29b      	uxth	r3, r3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80ab 	beq.w	80045ce <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80a6 	beq.w	80045ce <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004496:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e4      	bne.n	8004482 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	623b      	str	r3, [r7, #32]
   return(result);
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3308      	adds	r3, #8
 80044d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80044de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e3      	bne.n	80044b8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	60fb      	str	r3, [r7, #12]
   return(result);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f023 0310 	bic.w	r3, r3, #16
 8004518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	69b9      	ldr	r1, [r7, #24]
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	617b      	str	r3, [r7, #20]
   return(result);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e4      	bne.n	8004504 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f852 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800454c:	e03f      	b.n	80045ce <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <HAL_UART_IRQHandler+0x5a8>
 800455a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800455e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800456e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fe17 	bl	80051a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004576:	e02d      	b.n	80045d4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00e      	beq.n	80045a2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01c      	beq.n	80045d2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
    }
    return;
 80045a0:	e017      	b.n	80045d2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d012      	beq.n	80045d4 <HAL_UART_IRQHandler+0x604>
 80045ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fdc8 	bl	8005150 <UART_EndTransmit_IT>
    return;
 80045c0:	e008      	b.n	80045d4 <HAL_UART_IRQHandler+0x604>
      return;
 80045c2:	bf00      	nop
 80045c4:	e006      	b.n	80045d4 <HAL_UART_IRQHandler+0x604>
    return;
 80045c6:	bf00      	nop
 80045c8:	e004      	b.n	80045d4 <HAL_UART_IRQHandler+0x604>
      return;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <HAL_UART_IRQHandler+0x604>
      return;
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <HAL_UART_IRQHandler+0x604>
    return;
 80045d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80045d4:	37e8      	adds	r7, #232	@ 0xe8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop

080045dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b08a      	sub	sp, #40	@ 0x28
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	431a      	orrs	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	4313      	orrs	r3, r2
 800462e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4ba4      	ldr	r3, [pc, #656]	@ (80048c8 <UART_SetConfig+0x2c0>)
 8004638:	4013      	ands	r3, r2
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004640:	430b      	orrs	r3, r1
 8004642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a99      	ldr	r2, [pc, #612]	@ (80048cc <UART_SetConfig+0x2c4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004670:	4313      	orrs	r3, r2
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a90      	ldr	r2, [pc, #576]	@ (80048d0 <UART_SetConfig+0x2c8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d126      	bne.n	80046e0 <UART_SetConfig+0xd8>
 8004692:	4b90      	ldr	r3, [pc, #576]	@ (80048d4 <UART_SetConfig+0x2cc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b03      	cmp	r3, #3
 800469e:	d81b      	bhi.n	80046d8 <UART_SetConfig+0xd0>
 80046a0:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <UART_SetConfig+0xa0>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046c9 	.word	0x080046c9
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046d1 	.word	0x080046d1
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046be:	e116      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046c0:	2302      	movs	r3, #2
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c6:	e112      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ce:	e10e      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046d0:	2308      	movs	r3, #8
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d6:	e10a      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046de:	e106      	b.n	80048ee <UART_SetConfig+0x2e6>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7c      	ldr	r2, [pc, #496]	@ (80048d8 <UART_SetConfig+0x2d0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d138      	bne.n	800475c <UART_SetConfig+0x154>
 80046ea:	4b7a      	ldr	r3, [pc, #488]	@ (80048d4 <UART_SetConfig+0x2cc>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	d82d      	bhi.n	8004754 <UART_SetConfig+0x14c>
 80046f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <UART_SetConfig+0xf8>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004735 	.word	0x08004735
 8004704:	08004755 	.word	0x08004755
 8004708:	08004755 	.word	0x08004755
 800470c:	08004755 	.word	0x08004755
 8004710:	08004745 	.word	0x08004745
 8004714:	08004755 	.word	0x08004755
 8004718:	08004755 	.word	0x08004755
 800471c:	08004755 	.word	0x08004755
 8004720:	0800473d 	.word	0x0800473d
 8004724:	08004755 	.word	0x08004755
 8004728:	08004755 	.word	0x08004755
 800472c:	08004755 	.word	0x08004755
 8004730:	0800474d 	.word	0x0800474d
 8004734:	2300      	movs	r3, #0
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e0d8      	b.n	80048ee <UART_SetConfig+0x2e6>
 800473c:	2302      	movs	r3, #2
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004742:	e0d4      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e0d0      	b.n	80048ee <UART_SetConfig+0x2e6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004752:	e0cc      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e0c8      	b.n	80048ee <UART_SetConfig+0x2e6>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a5e      	ldr	r2, [pc, #376]	@ (80048dc <UART_SetConfig+0x2d4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d125      	bne.n	80047b2 <UART_SetConfig+0x1aa>
 8004766:	4b5b      	ldr	r3, [pc, #364]	@ (80048d4 <UART_SetConfig+0x2cc>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004770:	2b30      	cmp	r3, #48	@ 0x30
 8004772:	d016      	beq.n	80047a2 <UART_SetConfig+0x19a>
 8004774:	2b30      	cmp	r3, #48	@ 0x30
 8004776:	d818      	bhi.n	80047aa <UART_SetConfig+0x1a2>
 8004778:	2b20      	cmp	r3, #32
 800477a:	d00a      	beq.n	8004792 <UART_SetConfig+0x18a>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d814      	bhi.n	80047aa <UART_SetConfig+0x1a2>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <UART_SetConfig+0x182>
 8004784:	2b10      	cmp	r3, #16
 8004786:	d008      	beq.n	800479a <UART_SetConfig+0x192>
 8004788:	e00f      	b.n	80047aa <UART_SetConfig+0x1a2>
 800478a:	2300      	movs	r3, #0
 800478c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004790:	e0ad      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004792:	2302      	movs	r3, #2
 8004794:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004798:	e0a9      	b.n	80048ee <UART_SetConfig+0x2e6>
 800479a:	2304      	movs	r3, #4
 800479c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a0:	e0a5      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047a2:	2308      	movs	r3, #8
 80047a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a8:	e0a1      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047aa:	2310      	movs	r3, #16
 80047ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b0:	e09d      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a4a      	ldr	r2, [pc, #296]	@ (80048e0 <UART_SetConfig+0x2d8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d125      	bne.n	8004808 <UART_SetConfig+0x200>
 80047bc:	4b45      	ldr	r3, [pc, #276]	@ (80048d4 <UART_SetConfig+0x2cc>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80047c8:	d016      	beq.n	80047f8 <UART_SetConfig+0x1f0>
 80047ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80047cc:	d818      	bhi.n	8004800 <UART_SetConfig+0x1f8>
 80047ce:	2b80      	cmp	r3, #128	@ 0x80
 80047d0:	d00a      	beq.n	80047e8 <UART_SetConfig+0x1e0>
 80047d2:	2b80      	cmp	r3, #128	@ 0x80
 80047d4:	d814      	bhi.n	8004800 <UART_SetConfig+0x1f8>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <UART_SetConfig+0x1d8>
 80047da:	2b40      	cmp	r3, #64	@ 0x40
 80047dc:	d008      	beq.n	80047f0 <UART_SetConfig+0x1e8>
 80047de:	e00f      	b.n	8004800 <UART_SetConfig+0x1f8>
 80047e0:	2300      	movs	r3, #0
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e6:	e082      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047e8:	2302      	movs	r3, #2
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ee:	e07e      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047f0:	2304      	movs	r3, #4
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f6:	e07a      	b.n	80048ee <UART_SetConfig+0x2e6>
 80047f8:	2308      	movs	r3, #8
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fe:	e076      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004800:	2310      	movs	r3, #16
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004806:	e072      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a35      	ldr	r2, [pc, #212]	@ (80048e4 <UART_SetConfig+0x2dc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d12a      	bne.n	8004868 <UART_SetConfig+0x260>
 8004812:	4b30      	ldr	r3, [pc, #192]	@ (80048d4 <UART_SetConfig+0x2cc>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004820:	d01a      	beq.n	8004858 <UART_SetConfig+0x250>
 8004822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004826:	d81b      	bhi.n	8004860 <UART_SetConfig+0x258>
 8004828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800482c:	d00c      	beq.n	8004848 <UART_SetConfig+0x240>
 800482e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004832:	d815      	bhi.n	8004860 <UART_SetConfig+0x258>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <UART_SetConfig+0x238>
 8004838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800483c:	d008      	beq.n	8004850 <UART_SetConfig+0x248>
 800483e:	e00f      	b.n	8004860 <UART_SetConfig+0x258>
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004846:	e052      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004848:	2302      	movs	r3, #2
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484e:	e04e      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004850:	2304      	movs	r3, #4
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004856:	e04a      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004858:	2308      	movs	r3, #8
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e046      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004860:	2310      	movs	r3, #16
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e042      	b.n	80048ee <UART_SetConfig+0x2e6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a17      	ldr	r2, [pc, #92]	@ (80048cc <UART_SetConfig+0x2c4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d13a      	bne.n	80048e8 <UART_SetConfig+0x2e0>
 8004872:	4b18      	ldr	r3, [pc, #96]	@ (80048d4 <UART_SetConfig+0x2cc>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800487c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004880:	d01a      	beq.n	80048b8 <UART_SetConfig+0x2b0>
 8004882:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004886:	d81b      	bhi.n	80048c0 <UART_SetConfig+0x2b8>
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800488c:	d00c      	beq.n	80048a8 <UART_SetConfig+0x2a0>
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004892:	d815      	bhi.n	80048c0 <UART_SetConfig+0x2b8>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <UART_SetConfig+0x298>
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489c:	d008      	beq.n	80048b0 <UART_SetConfig+0x2a8>
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x2b8>
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a6:	e022      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ae:	e01e      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b6:	e01a      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048be:	e016      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e012      	b.n	80048ee <UART_SetConfig+0x2e6>
 80048c8:	efff69f3 	.word	0xefff69f3
 80048cc:	40008000 	.word	0x40008000
 80048d0:	40013800 	.word	0x40013800
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40004400 	.word	0x40004400
 80048dc:	40004800 	.word	0x40004800
 80048e0:	40004c00 	.word	0x40004c00
 80048e4:	40005000 	.word	0x40005000
 80048e8:	2310      	movs	r3, #16
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a9f      	ldr	r2, [pc, #636]	@ (8004b70 <UART_SetConfig+0x568>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d17a      	bne.n	80049ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d824      	bhi.n	800494a <UART_SetConfig+0x342>
 8004900:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <UART_SetConfig+0x300>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800492d 	.word	0x0800492d
 800490c:	0800494b 	.word	0x0800494b
 8004910:	08004935 	.word	0x08004935
 8004914:	0800494b 	.word	0x0800494b
 8004918:	0800493b 	.word	0x0800493b
 800491c:	0800494b 	.word	0x0800494b
 8004920:	0800494b 	.word	0x0800494b
 8004924:	0800494b 	.word	0x0800494b
 8004928:	08004943 	.word	0x08004943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7fd fd6c 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8004930:	61f8      	str	r0, [r7, #28]
        break;
 8004932:	e010      	b.n	8004956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004934:	4b8f      	ldr	r3, [pc, #572]	@ (8004b74 <UART_SetConfig+0x56c>)
 8004936:	61fb      	str	r3, [r7, #28]
        break;
 8004938:	e00d      	b.n	8004956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800493a:	f7fd fccd 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 800493e:	61f8      	str	r0, [r7, #28]
        break;
 8004940:	e009      	b.n	8004956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004946:	61fb      	str	r3, [r7, #28]
        break;
 8004948:	e005      	b.n	8004956 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80fb 	beq.w	8004b54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	429a      	cmp	r2, r3
 800496c:	d305      	bcc.n	800497a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	429a      	cmp	r2, r3
 8004978:	d903      	bls.n	8004982 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004980:	e0e8      	b.n	8004b54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2200      	movs	r2, #0
 8004986:	461c      	mov	r4, r3
 8004988:	4615      	mov	r5, r2
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	022b      	lsls	r3, r5, #8
 8004994:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004998:	0222      	lsls	r2, r4, #8
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	6849      	ldr	r1, [r1, #4]
 800499e:	0849      	lsrs	r1, r1, #1
 80049a0:	2000      	movs	r0, #0
 80049a2:	4688      	mov	r8, r1
 80049a4:	4681      	mov	r9, r0
 80049a6:	eb12 0a08 	adds.w	sl, r2, r8
 80049aa:	eb43 0b09 	adc.w	fp, r3, r9
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049bc:	4650      	mov	r0, sl
 80049be:	4659      	mov	r1, fp
 80049c0:	f7fb fc0a 	bl	80001d8 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4613      	mov	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049d2:	d308      	bcc.n	80049e6 <UART_SetConfig+0x3de>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049da:	d204      	bcs.n	80049e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	e0b6      	b.n	8004b54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049ec:	e0b2      	b.n	8004b54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f6:	d15e      	bne.n	8004ab6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d828      	bhi.n	8004a52 <UART_SetConfig+0x44a>
 8004a00:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <UART_SetConfig+0x400>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a3d 	.word	0x08004a3d
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a43 	.word	0x08004a43
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a53 	.word	0x08004a53
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a4b 	.word	0x08004a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7fd fcec 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8004a30:	61f8      	str	r0, [r7, #28]
        break;
 8004a32:	e014      	b.n	8004a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a34:	f7fd fcfe 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8004a38:	61f8      	str	r0, [r7, #28]
        break;
 8004a3a:	e010      	b.n	8004a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004b74 <UART_SetConfig+0x56c>)
 8004a3e:	61fb      	str	r3, [r7, #28]
        break;
 8004a40:	e00d      	b.n	8004a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fd fc49 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8004a46:	61f8      	str	r0, [r7, #28]
        break;
 8004a48:	e009      	b.n	8004a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a4e:	61fb      	str	r3, [r7, #28]
        break;
 8004a50:	e005      	b.n	8004a5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d077      	beq.n	8004b54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	005a      	lsls	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	441a      	add	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b0f      	cmp	r3, #15
 8004a7e:	d916      	bls.n	8004aae <UART_SetConfig+0x4a6>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a86:	d212      	bcs.n	8004aae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f023 030f 	bic.w	r3, r3, #15
 8004a90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	8afb      	ldrh	r3, [r7, #22]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	8afa      	ldrh	r2, [r7, #22]
 8004aaa:	60da      	str	r2, [r3, #12]
 8004aac:	e052      	b.n	8004b54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ab4:	e04e      	b.n	8004b54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d827      	bhi.n	8004b0e <UART_SetConfig+0x506>
 8004abe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac4 <UART_SetConfig+0x4bc>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004af1 	.word	0x08004af1
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004b0f 	.word	0x08004b0f
 8004ad4:	08004aff 	.word	0x08004aff
 8004ad8:	08004b0f 	.word	0x08004b0f
 8004adc:	08004b0f 	.word	0x08004b0f
 8004ae0:	08004b0f 	.word	0x08004b0f
 8004ae4:	08004b07 	.word	0x08004b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f7fd fc8e 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8004aec:	61f8      	str	r0, [r7, #28]
        break;
 8004aee:	e014      	b.n	8004b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af0:	f7fd fca0 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8004af4:	61f8      	str	r0, [r7, #28]
        break;
 8004af6:	e010      	b.n	8004b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af8:	4b1e      	ldr	r3, [pc, #120]	@ (8004b74 <UART_SetConfig+0x56c>)
 8004afa:	61fb      	str	r3, [r7, #28]
        break;
 8004afc:	e00d      	b.n	8004b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fd fbeb 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8004b02:	61f8      	str	r0, [r7, #28]
        break;
 8004b04:	e009      	b.n	8004b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b0a:	61fb      	str	r3, [r7, #28]
        break;
 8004b0c:	e005      	b.n	8004b1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b18:	bf00      	nop
    }

    if (pclk != 0U)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d019      	beq.n	8004b54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	085a      	lsrs	r2, r3, #1
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	441a      	add	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d909      	bls.n	8004b4e <UART_SetConfig+0x546>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b40:	d205      	bcs.n	8004b4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	e002      	b.n	8004b54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3728      	adds	r7, #40	@ 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6e:	bf00      	nop
 8004b70:	40008000 	.word	0x40008000
 8004b74:	00f42400 	.word	0x00f42400

08004b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01a      	beq.n	8004c8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c76:	d10a      	bne.n	8004c8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	605a      	str	r2, [r3, #4]
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b098      	sub	sp, #96	@ 0x60
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ccc:	f7fc fa42 	bl	8001154 <HAL_GetTick>
 8004cd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d12e      	bne.n	8004d3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f88c 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d021      	beq.n	8004d3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e6      	bne.n	8004cfa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e062      	b.n	8004e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d149      	bne.n	8004de0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d54:	2200      	movs	r2, #0
 8004d56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f856 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d03c      	beq.n	8004de0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	623b      	str	r3, [r7, #32]
   return(result);
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e6      	bne.n	8004d66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3308      	adds	r3, #8
 8004db6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	69b9      	ldr	r1, [r7, #24]
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e5      	bne.n	8004d98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e011      	b.n	8004e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3758      	adds	r7, #88	@ 0x58
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e1c:	e04f      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d04b      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fc f995 	bl	8001154 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e04e      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d037      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b80      	cmp	r3, #128	@ 0x80
 8004e52:	d034      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	d031      	beq.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d110      	bne.n	8004e8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f838 	bl	8004ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2208      	movs	r2, #8
 8004e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e029      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e98:	d111      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f81e 	bl	8004ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e00f      	b.n	8004ede <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	bf0c      	ite	eq
 8004ece:	2301      	moveq	r3, #1
 8004ed0:	2300      	movne	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d0a0      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b095      	sub	sp, #84	@ 0x54
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e6      	bne.n	8004eee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e5      	bne.n	8004f20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d118      	bne.n	8004f8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 0310 	bic.w	r3, r3, #16
 8004f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6979      	ldr	r1, [r7, #20]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	613b      	str	r3, [r7, #16]
   return(result);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e6      	bne.n	8004f5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fa2:	bf00      	nop
 8004fa4:	3754      	adds	r7, #84	@ 0x54
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff fb05 	bl	80045dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b08f      	sub	sp, #60	@ 0x3c
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fe6:	2b21      	cmp	r3, #33	@ 0x21
 8004fe8:	d14c      	bne.n	8005084 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d132      	bne.n	800505c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	61fb      	str	r3, [r7, #28]
   return(result);
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800500a:	637b      	str	r3, [r7, #52]	@ 0x34
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005016:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800501a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e6      	bne.n	8004ff6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	60bb      	str	r3, [r7, #8]
   return(result);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800503c:	633b      	str	r3, [r7, #48]	@ 0x30
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005046:	61bb      	str	r3, [r7, #24]
 8005048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6979      	ldr	r1, [r7, #20]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	613b      	str	r3, [r7, #16]
   return(result);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e6      	bne.n	8005028 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800505a:	e013      	b.n	8005084 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005084:	bf00      	nop
 8005086:	373c      	adds	r7, #60	@ 0x3c
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b091      	sub	sp, #68	@ 0x44
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800509c:	2b21      	cmp	r3, #33	@ 0x21
 800509e:	d151      	bne.n	8005144 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d132      	bne.n	8005112 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80050cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e6      	bne.n	80050ac <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	617b      	str	r3, [r7, #20]
   return(result);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e6      	bne.n	80050de <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005110:	e018      	b.n	8005144 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511a:	881a      	ldrh	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005124:	b292      	uxth	r2, r2
 8005126:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512c:	1c9a      	adds	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005144:	bf00      	nop
 8005146:	3744      	adds	r7, #68	@ 0x44
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	60bb      	str	r3, [r7, #8]
   return(result);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6979      	ldr	r1, [r7, #20]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	613b      	str	r3, [r7, #16]
   return(result);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e6      	bne.n	8005158 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fb fc72 	bl	8000a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800519c:	bf00      	nop
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <__cxa_guard_acquire>:
 80051b8:	6802      	ldr	r2, [r0, #0]
 80051ba:	07d2      	lsls	r2, r2, #31
 80051bc:	4603      	mov	r3, r0
 80051be:	d405      	bmi.n	80051cc <__cxa_guard_acquire+0x14>
 80051c0:	7842      	ldrb	r2, [r0, #1]
 80051c2:	b102      	cbz	r2, 80051c6 <__cxa_guard_acquire+0xe>
 80051c4:	deff      	udf	#255	@ 0xff
 80051c6:	2001      	movs	r0, #1
 80051c8:	7058      	strb	r0, [r3, #1]
 80051ca:	4770      	bx	lr
 80051cc:	2000      	movs	r0, #0
 80051ce:	4770      	bx	lr

080051d0 <__cxa_guard_release>:
 80051d0:	2301      	movs	r3, #1
 80051d2:	6003      	str	r3, [r0, #0]
 80051d4:	4770      	bx	lr

080051d6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80051d6:	b10a      	cbz	r2, 80051dc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80051d8:	f000 bbce 	b.w	8005978 <memcpy>
 80051dc:	4770      	bx	lr

080051de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 80051de:	1e08      	subs	r0, r1, #0
 80051e0:	b508      	push	{r3, lr}
 80051e2:	da01      	bge.n	80051e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 80051e4:	f000 fa4d 	bl	8005682 <_ZSt17__throw_bad_allocv>
 80051e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051ec:	f000 ba38 	b.w	8005660 <_Znwj>

080051f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80051f0:	f850 3b08 	ldr.w	r3, [r0], #8
 80051f4:	1a1b      	subs	r3, r3, r0
 80051f6:	4258      	negs	r0, r3
 80051f8:	4158      	adcs	r0, r3
 80051fa:	4770      	bx	lr

080051fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80051fc:	680b      	ldr	r3, [r1, #0]
 80051fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005202:	b510      	push	{r4, lr}
 8005204:	d302      	bcc.n	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8005206:	480b      	ldr	r0, [pc, #44]	@ (8005234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 8005208:	f000 fa3e 	bl	8005688 <_ZSt20__throw_length_errorPKc>
 800520c:	4293      	cmp	r3, r2
 800520e:	d90b      	bls.n	8005228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005210:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8005214:	ea4f 0442 	mov.w	r4, r2, lsl #1
 8005218:	d206      	bcs.n	8005228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800521a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800521e:	bf2a      	itet	cs
 8005220:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8005224:	600c      	strcc	r4, [r1, #0]
 8005226:	600b      	strcs	r3, [r1, #0]
 8005228:	6809      	ldr	r1, [r1, #0]
 800522a:	3101      	adds	r1, #1
 800522c:	f7ff ffd7 	bl	80051de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 8005230:	bd10      	pop	{r4, pc}
 8005232:	bf00      	nop
 8005234:	08005b6c 	.word	0x08005b6c

08005238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 8005238:	6800      	ldr	r0, [r0, #0]
 800523a:	f000 ba0f 	b.w	800565c <_ZdlPv>

0800523e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800523e:	b510      	push	{r4, lr}
 8005240:	4604      	mov	r4, r0
 8005242:	f7ff ffd5 	bl	80051f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8005246:	b918      	cbnz	r0, 8005250 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 8005248:	68a1      	ldr	r1, [r4, #8]
 800524a:	4620      	mov	r0, r4
 800524c:	f7ff fff4 	bl	8005238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 8005250:	bd10      	pop	{r4, pc}
	...

08005254 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8005254:	b508      	push	{r3, lr}
 8005256:	4603      	mov	r3, r0
 8005258:	4608      	mov	r0, r1
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4298      	cmp	r0, r3
 800525e:	4611      	mov	r1, r2
 8005260:	d903      	bls.n	800526a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8005262:	4602      	mov	r2, r0
 8005264:	4801      	ldr	r0, [pc, #4]	@ (800526c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8005266:	f000 fa12 	bl	800568e <_ZSt24__throw_out_of_range_fmtPKcz>
 800526a:	bd08      	pop	{r3, pc}
 800526c:	08005b84 	.word	0x08005b84

08005270 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8005270:	6840      	ldr	r0, [r0, #4]
 8005272:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8005276:	3901      	subs	r1, #1
 8005278:	1a09      	subs	r1, r1, r0
 800527a:	4291      	cmp	r1, r2
 800527c:	b508      	push	{r3, lr}
 800527e:	d202      	bcs.n	8005286 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fa01 	bl	8005688 <_ZSt20__throw_length_errorPKc>
 8005286:	bd08      	pop	{r3, pc}

08005288 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8005288:	6803      	ldr	r3, [r0, #0]
 800528a:	428b      	cmp	r3, r1
 800528c:	d806      	bhi.n	800529c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800528e:	6842      	ldr	r2, [r0, #4]
 8005290:	4413      	add	r3, r2
 8005292:	4299      	cmp	r1, r3
 8005294:	bf94      	ite	ls
 8005296:	2000      	movls	r0, #0
 8005298:	2001      	movhi	r0, #1
 800529a:	4770      	bx	lr
 800529c:	2001      	movs	r0, #1
 800529e:	4770      	bx	lr

080052a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80052a0:	2a01      	cmp	r2, #1
 80052a2:	b410      	push	{r4}
 80052a4:	d104      	bne.n	80052b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80052a6:	780a      	ldrb	r2, [r1, #0]
 80052a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ac:	7002      	strb	r2, [r0, #0]
 80052ae:	4770      	bx	lr
 80052b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052b4:	f7ff bf8f 	b.w	80051d6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080052b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80052b8:	2a01      	cmp	r2, #1
 80052ba:	b430      	push	{r4, r5}
 80052bc:	d103      	bne.n	80052c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80052be:	780b      	ldrb	r3, [r1, #0]
 80052c0:	7003      	strb	r3, [r0, #0]
 80052c2:	bc30      	pop	{r4, r5}
 80052c4:	4770      	bx	lr
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	d0fb      	beq.n	80052c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80052ca:	bc30      	pop	{r4, r5}
 80052cc:	f000 bab2 	b.w	8005834 <memmove>

080052d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80052d0:	460b      	mov	r3, r1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	b410      	push	{r4}
 80052d6:	4611      	mov	r1, r2
 80052d8:	4604      	mov	r4, r0
 80052da:	d103      	bne.n	80052e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80052dc:	7022      	strb	r2, [r4, #0]
 80052de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0fa      	beq.n	80052de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80052e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ec:	461a      	mov	r2, r3
 80052ee:	f000 babb 	b.w	8005868 <memset>

080052f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 80052f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052f4:	290f      	cmp	r1, #15
 80052f6:	4604      	mov	r4, r0
 80052f8:	9101      	str	r1, [sp, #4]
 80052fa:	4615      	mov	r5, r2
 80052fc:	d906      	bls.n	800530c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 80052fe:	2200      	movs	r2, #0
 8005300:	a901      	add	r1, sp, #4
 8005302:	f7ff ff7b 	bl	80051fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	6020      	str	r0, [r4, #0]
 800530a:	60a3      	str	r3, [r4, #8]
 800530c:	9901      	ldr	r1, [sp, #4]
 800530e:	b119      	cbz	r1, 8005318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	462a      	mov	r2, r5
 8005314:	f7ff ffdc 	bl	80052d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8005318:	9b01      	ldr	r3, [sp, #4]
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	6063      	str	r3, [r4, #4]
 800531e:	2100      	movs	r1, #0
 8005320:	54d1      	strb	r1, [r2, r3]
 8005322:	b003      	add	sp, #12
 8005324:	bd30      	pop	{r4, r5, pc}

08005326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8005326:	f100 0208 	add.w	r2, r0, #8
 800532a:	6002      	str	r2, [r0, #0]
 800532c:	2200      	movs	r2, #0
 800532e:	6042      	str	r2, [r0, #4]
 8005330:	7202      	strb	r2, [r0, #8]
 8005332:	4770      	bx	lr

08005334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8005334:	b510      	push	{r4, lr}
 8005336:	f100 0308 	add.w	r3, r0, #8
 800533a:	4604      	mov	r4, r0
 800533c:	6003      	str	r3, [r0, #0]
 800533e:	f7ff ffd8 	bl	80052f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8005342:	4620      	mov	r0, r4
 8005344:	bd10      	pop	{r4, pc}

08005346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8005346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005348:	f100 0708 	add.w	r7, r0, #8
 800534c:	6007      	str	r7, [r0, #0]
 800534e:	4605      	mov	r5, r0
 8005350:	4608      	mov	r0, r1
 8005352:	460c      	mov	r4, r1
 8005354:	f7ff ff4c 	bl	80051f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8005358:	f104 0608 	add.w	r6, r4, #8
 800535c:	6862      	ldr	r2, [r4, #4]
 800535e:	b160      	cbz	r0, 800537a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8005360:	3201      	adds	r2, #1
 8005362:	4631      	mov	r1, r6
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ff36 	bl	80051d6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800536a:	6863      	ldr	r3, [r4, #4]
 800536c:	606b      	str	r3, [r5, #4]
 800536e:	2300      	movs	r3, #0
 8005370:	7223      	strb	r3, [r4, #8]
 8005372:	6026      	str	r6, [r4, #0]
 8005374:	6063      	str	r3, [r4, #4]
 8005376:	4628      	mov	r0, r5
 8005378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	602b      	str	r3, [r5, #0]
 800537e:	68a3      	ldr	r3, [r4, #8]
 8005380:	60ab      	str	r3, [r5, #8]
 8005382:	e7f2      	b.n	800536a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

08005384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005384:	b510      	push	{r4, lr}
 8005386:	4604      	mov	r4, r0
 8005388:	f7ff ff59 	bl	800523e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800538c:	4620      	mov	r0, r4
 800538e:	bd10      	pop	{r4, pc}

08005390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	4605      	mov	r5, r0
 8005394:	4608      	mov	r0, r1
 8005396:	460c      	mov	r4, r1
 8005398:	f7ff ff2a 	bl	80051f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800539c:	4606      	mov	r6, r0
 800539e:	b190      	cbz	r0, 80053c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x36>
 80053a0:	42a5      	cmp	r5, r4
 80053a2:	d00a      	beq.n	80053ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2a>
 80053a4:	6862      	ldr	r2, [r4, #4]
 80053a6:	b11a      	cbz	r2, 80053b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x20>
 80053a8:	6821      	ldr	r1, [r4, #0]
 80053aa:	6828      	ldr	r0, [r5, #0]
 80053ac:	f7ff ff78 	bl	80052a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	682a      	ldr	r2, [r5, #0]
 80053b4:	606b      	str	r3, [r5, #4]
 80053b6:	2100      	movs	r1, #0
 80053b8:	54d1      	strb	r1, [r2, r3]
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	2300      	movs	r3, #0
 80053be:	6063      	str	r3, [r4, #4]
 80053c0:	7013      	strb	r3, [r2, #0]
 80053c2:	4628      	mov	r0, r5
 80053c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c6:	4628      	mov	r0, r5
 80053c8:	f7ff ff12 	bl	80051f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80053cc:	b908      	cbnz	r0, 80053d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x42>
 80053ce:	682e      	ldr	r6, [r5, #0]
 80053d0:	68af      	ldr	r7, [r5, #8]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	6863      	ldr	r3, [r4, #4]
 80053d8:	606b      	str	r3, [r5, #4]
 80053da:	68a3      	ldr	r3, [r4, #8]
 80053dc:	60ab      	str	r3, [r5, #8]
 80053de:	b116      	cbz	r6, 80053e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x56>
 80053e0:	6026      	str	r6, [r4, #0]
 80053e2:	60a7      	str	r7, [r4, #8]
 80053e4:	e7e9      	b.n	80053ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2a>
 80053e6:	f104 0308 	add.w	r3, r4, #8
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	e7e5      	b.n	80053ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2a>

080053ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80053ee:	6840      	ldr	r0, [r0, #4]
 80053f0:	4770      	bx	lr

080053f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80053f2:	b510      	push	{r4, lr}
 80053f4:	4604      	mov	r4, r0
 80053f6:	f7ff fefb 	bl	80051f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80053fa:	b908      	cbnz	r0, 8005400 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80053fc:	68a0      	ldr	r0, [r4, #8]
 80053fe:	bd10      	pop	{r4, pc}
 8005400:	200f      	movs	r0, #15
 8005402:	e7fc      	b.n	80053fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08005404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8005404:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800540a:	461f      	mov	r7, r3
 800540c:	6843      	ldr	r3, [r0, #4]
 800540e:	eb01 0802 	add.w	r8, r1, r2
 8005412:	1ab2      	subs	r2, r6, r2
 8005414:	441a      	add	r2, r3
 8005416:	4604      	mov	r4, r0
 8005418:	460d      	mov	r5, r1
 800541a:	eba3 0908 	sub.w	r9, r3, r8
 800541e:	9201      	str	r2, [sp, #4]
 8005420:	f7ff ffe7 	bl	80053f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8005424:	a901      	add	r1, sp, #4
 8005426:	4602      	mov	r2, r0
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff fee7 	bl	80051fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800542e:	4682      	mov	sl, r0
 8005430:	b11d      	cbz	r5, 800543a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8005432:	6821      	ldr	r1, [r4, #0]
 8005434:	462a      	mov	r2, r5
 8005436:	f7ff ff33 	bl	80052a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800543a:	b137      	cbz	r7, 800544a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800543c:	b12e      	cbz	r6, 800544a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800543e:	4632      	mov	r2, r6
 8005440:	4639      	mov	r1, r7
 8005442:	eb0a 0005 	add.w	r0, sl, r5
 8005446:	f7ff ff2b 	bl	80052a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800544a:	f1b9 0f00 	cmp.w	r9, #0
 800544e:	d007      	beq.n	8005460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8005450:	6821      	ldr	r1, [r4, #0]
 8005452:	4435      	add	r5, r6
 8005454:	464a      	mov	r2, r9
 8005456:	4441      	add	r1, r8
 8005458:	eb0a 0005 	add.w	r0, sl, r5
 800545c:	f7ff ff20 	bl	80052a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff feec 	bl	800523e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005466:	9b01      	ldr	r3, [sp, #4]
 8005468:	f8c4 a000 	str.w	sl, [r4]
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	b002      	add	sp, #8
 8005470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005474 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8005474:	6800      	ldr	r0, [r0, #0]
 8005476:	4408      	add	r0, r1
 8005478:	4770      	bx	lr

0800547a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj>:
 800547a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	e9dd 6806 	ldrd	r6, r8, [sp, #24]
 8005482:	460d      	mov	r5, r1
 8005484:	4617      	mov	r7, r2
 8005486:	461c      	mov	r4, r3
 8005488:	b136      	cbz	r6, 8005498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x1e>
 800548a:	4296      	cmp	r6, r2
 800548c:	d830      	bhi.n	80054f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x76>
 800548e:	4632      	mov	r2, r6
 8005490:	4619      	mov	r1, r3
 8005492:	4628      	mov	r0, r5
 8005494:	f7ff ff10 	bl	80052b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005498:	f1b8 0f00 	cmp.w	r8, #0
 800549c:	d011      	beq.n	80054c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x48>
 800549e:	42be      	cmp	r6, r7
 80054a0:	d00f      	beq.n	80054c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x48>
 80054a2:	4642      	mov	r2, r8
 80054a4:	19e9      	adds	r1, r5, r7
 80054a6:	19a8      	adds	r0, r5, r6
 80054a8:	f7ff ff06 	bl	80052b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80054ac:	42be      	cmp	r6, r7
 80054ae:	d908      	bls.n	80054c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x48>
 80054b0:	19eb      	adds	r3, r5, r7
 80054b2:	19a2      	adds	r2, r4, r6
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d306      	bcc.n	80054c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x4c>
 80054b8:	4632      	mov	r2, r6
 80054ba:	4621      	mov	r1, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f7ff fefb 	bl	80052b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80054c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c6:	42a3      	cmp	r3, r4
 80054c8:	d808      	bhi.n	80054dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x62>
 80054ca:	1b64      	subs	r4, r4, r5
 80054cc:	1be4      	subs	r4, r4, r7
 80054ce:	4434      	add	r4, r6
 80054d0:	4632      	mov	r2, r6
 80054d2:	1929      	adds	r1, r5, r4
 80054d4:	4628      	mov	r0, r5
 80054d6:	f7ff fee3 	bl	80052a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80054da:	e7f2      	b.n	80054c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x48>
 80054dc:	1b1f      	subs	r7, r3, r4
 80054de:	463a      	mov	r2, r7
 80054e0:	4621      	mov	r1, r4
 80054e2:	4628      	mov	r0, r5
 80054e4:	f7ff fee8 	bl	80052b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80054e8:	1bf2      	subs	r2, r6, r7
 80054ea:	19a9      	adds	r1, r5, r6
 80054ec:	19e8      	adds	r0, r5, r7
 80054ee:	e7f2      	b.n	80054d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x5c>
 80054f0:	f1b8 0f00 	cmp.w	r8, #0
 80054f4:	d1d5      	bne.n	80054a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x28>
 80054f6:	e7db      	b.n	80054b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj+0x36>

080054f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80054f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054fe:	4615      	mov	r5, r2
 8005500:	4604      	mov	r4, r0
 8005502:	4632      	mov	r2, r6
 8005504:	460f      	mov	r7, r1
 8005506:	4698      	mov	r8, r3
 8005508:	4629      	mov	r1, r5
 800550a:	4b21      	ldr	r3, [pc, #132]	@ (8005590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x98>)
 800550c:	f7ff feb0 	bl	8005270 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005510:	4620      	mov	r0, r4
 8005512:	f7ff ff6e 	bl	80053f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8005516:	f8d4 b004 	ldr.w	fp, [r4, #4]
 800551a:	eba6 0a05 	sub.w	sl, r6, r5
 800551e:	44da      	add	sl, fp
 8005520:	4550      	cmp	r0, sl
 8005522:	d32d      	bcc.n	8005580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	4641      	mov	r1, r8
 8005528:	eb03 0907 	add.w	r9, r3, r7
 800552c:	4620      	mov	r0, r4
 800552e:	442f      	add	r7, r5
 8005530:	ebab 0707 	sub.w	r7, fp, r7
 8005534:	f7ff fea8 	bl	8005288 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8005538:	b1c8      	cbz	r0, 800556e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x76>
 800553a:	b147      	cbz	r7, 800554e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x56>
 800553c:	42b5      	cmp	r5, r6
 800553e:	d006      	beq.n	800554e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x56>
 8005540:	463a      	mov	r2, r7
 8005542:	eb09 0105 	add.w	r1, r9, r5
 8005546:	eb09 0006 	add.w	r0, r9, r6
 800554a:	f7ff feb5 	bl	80052b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800554e:	b126      	cbz	r6, 800555a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8005550:	4632      	mov	r2, r6
 8005552:	4641      	mov	r1, r8
 8005554:	4648      	mov	r0, r9
 8005556:	f7ff fea3 	bl	80052a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	f8c4 a004 	str.w	sl, [r4, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	4620      	mov	r0, r4
 8005564:	f803 200a 	strb.w	r2, [r3, sl]
 8005568:	b003      	add	sp, #12
 800556a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556e:	e9cd 6700 	strd	r6, r7, [sp]
 8005572:	4643      	mov	r3, r8
 8005574:	462a      	mov	r2, r5
 8005576:	4649      	mov	r1, r9
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff ff7e 	bl	800547a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_replace_coldEPcjPKcjj>
 800557e:	e7ec      	b.n	800555a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8005580:	9600      	str	r6, [sp, #0]
 8005582:	4643      	mov	r3, r8
 8005584:	462a      	mov	r2, r5
 8005586:	4639      	mov	r1, r7
 8005588:	4620      	mov	r0, r4
 800558a:	f7ff ff3b 	bl	8005404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800558e:	e7e4      	b.n	800555a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8005590:	08005bd1 	.word	0x08005bd1

08005594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8005594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005596:	4604      	mov	r4, r0
 8005598:	4615      	mov	r5, r2
 800559a:	4a09      	ldr	r2, [pc, #36]	@ (80055c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 800559c:	460f      	mov	r7, r1
 800559e:	461e      	mov	r6, r3
 80055a0:	f7ff fe58 	bl	8005254 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80055a4:	6862      	ldr	r2, [r4, #4]
 80055a6:	9b08      	ldr	r3, [sp, #32]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	1bd2      	subs	r2, r2, r7
 80055ac:	42aa      	cmp	r2, r5
 80055ae:	4601      	mov	r1, r0
 80055b0:	4633      	mov	r3, r6
 80055b2:	bf28      	it	cs
 80055b4:	462a      	movcs	r2, r5
 80055b6:	4620      	mov	r0, r4
 80055b8:	f7ff ff9e 	bl	80054f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80055bc:	b003      	add	sp, #12
 80055be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c0:	08005bbb 	.word	0x08005bbb

080055c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80055c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055c6:	4605      	mov	r5, r0
 80055c8:	4610      	mov	r0, r2
 80055ca:	4614      	mov	r4, r2
 80055cc:	460e      	mov	r6, r1
 80055ce:	f7fa fdfb 	bl	80001c8 <strlen>
 80055d2:	4623      	mov	r3, r4
 80055d4:	9000      	str	r0, [sp, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	4631      	mov	r1, r6
 80055da:	4628      	mov	r0, r5
 80055dc:	f7ff ffda 	bl	8005594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80055e0:	b002      	add	sp, #8
 80055e2:	bd70      	pop	{r4, r5, r6, pc}

080055e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80055e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80055e8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80055ec:	4604      	mov	r4, r0
 80055ee:	eb02 0708 	add.w	r7, r2, r8
 80055f2:	460e      	mov	r6, r1
 80055f4:	4615      	mov	r5, r2
 80055f6:	f7ff fefc 	bl	80053f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80055fa:	42b8      	cmp	r0, r7
 80055fc:	d30e      	bcc.n	800561c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 80055fe:	b12d      	cbz	r5, 800560c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	462a      	mov	r2, r5
 8005604:	4631      	mov	r1, r6
 8005606:	4440      	add	r0, r8
 8005608:	f7ff fe4a 	bl	80052a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	6067      	str	r7, [r4, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	4620      	mov	r0, r4
 8005614:	55da      	strb	r2, [r3, r7]
 8005616:	b002      	add	sp, #8
 8005618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800561c:	9500      	str	r5, [sp, #0]
 800561e:	4633      	mov	r3, r6
 8005620:	2200      	movs	r2, #0
 8005622:	4641      	mov	r1, r8
 8005624:	4620      	mov	r0, r4
 8005626:	f7ff feed 	bl	8005404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800562a:	e7ef      	b.n	800560c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

0800562c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	460d      	mov	r5, r1
 8005634:	f7fa fdc8 	bl	80001c8 <strlen>
 8005638:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800563a:	4606      	mov	r6, r0
 800563c:	4602      	mov	r2, r0
 800563e:	2100      	movs	r1, #0
 8005640:	4620      	mov	r0, r4
 8005642:	f7ff fe15 	bl	8005270 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005646:	4632      	mov	r2, r6
 8005648:	4629      	mov	r1, r5
 800564a:	4620      	mov	r0, r4
 800564c:	f7ff ffca 	bl	80055e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8005650:	bd70      	pop	{r4, r5, r6, pc}
 8005652:	bf00      	nop
 8005654:	08005bea 	.word	0x08005bea

08005658 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8005658:	6800      	ldr	r0, [r0, #0]
 800565a:	4770      	bx	lr

0800565c <_ZdlPv>:
 800565c:	f000 b834 	b.w	80056c8 <free>

08005660 <_Znwj>:
 8005660:	2801      	cmp	r0, #1
 8005662:	bf38      	it	cc
 8005664:	2001      	movcc	r0, #1
 8005666:	b510      	push	{r4, lr}
 8005668:	4604      	mov	r4, r0
 800566a:	4620      	mov	r0, r4
 800566c:	f000 f824 	bl	80056b8 <malloc>
 8005670:	b100      	cbz	r0, 8005674 <_Znwj+0x14>
 8005672:	bd10      	pop	{r4, pc}
 8005674:	f000 f810 	bl	8005698 <_ZSt15get_new_handlerv>
 8005678:	b908      	cbnz	r0, 800567e <_Znwj+0x1e>
 800567a:	f000 f815 	bl	80056a8 <abort>
 800567e:	4780      	blx	r0
 8005680:	e7f3      	b.n	800566a <_Znwj+0xa>

08005682 <_ZSt17__throw_bad_allocv>:
 8005682:	b508      	push	{r3, lr}
 8005684:	f000 f810 	bl	80056a8 <abort>

08005688 <_ZSt20__throw_length_errorPKc>:
 8005688:	b508      	push	{r3, lr}
 800568a:	f000 f80d 	bl	80056a8 <abort>

0800568e <_ZSt24__throw_out_of_range_fmtPKcz>:
 800568e:	b40f      	push	{r0, r1, r2, r3}
 8005690:	b508      	push	{r3, lr}
 8005692:	f000 f809 	bl	80056a8 <abort>
	...

08005698 <_ZSt15get_new_handlerv>:
 8005698:	4b02      	ldr	r3, [pc, #8]	@ (80056a4 <_ZSt15get_new_handlerv+0xc>)
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	f3bf 8f5b 	dmb	ish
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000210 	.word	0x20000210

080056a8 <abort>:
 80056a8:	b508      	push	{r3, lr}
 80056aa:	2006      	movs	r0, #6
 80056ac:	f000 f90c 	bl	80058c8 <raise>
 80056b0:	2001      	movs	r0, #1
 80056b2:	f7fb fc61 	bl	8000f78 <_exit>
	...

080056b8 <malloc>:
 80056b8:	4b02      	ldr	r3, [pc, #8]	@ (80056c4 <malloc+0xc>)
 80056ba:	4601      	mov	r1, r0
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	f000 b82d 	b.w	800571c <_malloc_r>
 80056c2:	bf00      	nop
 80056c4:	20000070 	.word	0x20000070

080056c8 <free>:
 80056c8:	4b02      	ldr	r3, [pc, #8]	@ (80056d4 <free+0xc>)
 80056ca:	4601      	mov	r1, r0
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	f000 b961 	b.w	8005994 <_free_r>
 80056d2:	bf00      	nop
 80056d4:	20000070 	.word	0x20000070

080056d8 <sbrk_aligned>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4e0f      	ldr	r6, [pc, #60]	@ (8005718 <sbrk_aligned+0x40>)
 80056dc:	460c      	mov	r4, r1
 80056de:	6831      	ldr	r1, [r6, #0]
 80056e0:	4605      	mov	r5, r0
 80056e2:	b911      	cbnz	r1, 80056ea <sbrk_aligned+0x12>
 80056e4:	f000 f90c 	bl	8005900 <_sbrk_r>
 80056e8:	6030      	str	r0, [r6, #0]
 80056ea:	4621      	mov	r1, r4
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 f907 	bl	8005900 <_sbrk_r>
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	d103      	bne.n	80056fe <sbrk_aligned+0x26>
 80056f6:	f04f 34ff 	mov.w	r4, #4294967295
 80056fa:	4620      	mov	r0, r4
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	1cc4      	adds	r4, r0, #3
 8005700:	f024 0403 	bic.w	r4, r4, #3
 8005704:	42a0      	cmp	r0, r4
 8005706:	d0f8      	beq.n	80056fa <sbrk_aligned+0x22>
 8005708:	1a21      	subs	r1, r4, r0
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f8f8 	bl	8005900 <_sbrk_r>
 8005710:	3001      	adds	r0, #1
 8005712:	d1f2      	bne.n	80056fa <sbrk_aligned+0x22>
 8005714:	e7ef      	b.n	80056f6 <sbrk_aligned+0x1e>
 8005716:	bf00      	nop
 8005718:	20000214 	.word	0x20000214

0800571c <_malloc_r>:
 800571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005720:	1ccd      	adds	r5, r1, #3
 8005722:	f025 0503 	bic.w	r5, r5, #3
 8005726:	3508      	adds	r5, #8
 8005728:	2d0c      	cmp	r5, #12
 800572a:	bf38      	it	cc
 800572c:	250c      	movcc	r5, #12
 800572e:	2d00      	cmp	r5, #0
 8005730:	4606      	mov	r6, r0
 8005732:	db01      	blt.n	8005738 <_malloc_r+0x1c>
 8005734:	42a9      	cmp	r1, r5
 8005736:	d904      	bls.n	8005742 <_malloc_r+0x26>
 8005738:	230c      	movs	r3, #12
 800573a:	6033      	str	r3, [r6, #0]
 800573c:	2000      	movs	r0, #0
 800573e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005742:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005818 <_malloc_r+0xfc>
 8005746:	f000 f869 	bl	800581c <__malloc_lock>
 800574a:	f8d8 3000 	ldr.w	r3, [r8]
 800574e:	461c      	mov	r4, r3
 8005750:	bb44      	cbnz	r4, 80057a4 <_malloc_r+0x88>
 8005752:	4629      	mov	r1, r5
 8005754:	4630      	mov	r0, r6
 8005756:	f7ff ffbf 	bl	80056d8 <sbrk_aligned>
 800575a:	1c43      	adds	r3, r0, #1
 800575c:	4604      	mov	r4, r0
 800575e:	d158      	bne.n	8005812 <_malloc_r+0xf6>
 8005760:	f8d8 4000 	ldr.w	r4, [r8]
 8005764:	4627      	mov	r7, r4
 8005766:	2f00      	cmp	r7, #0
 8005768:	d143      	bne.n	80057f2 <_malloc_r+0xd6>
 800576a:	2c00      	cmp	r4, #0
 800576c:	d04b      	beq.n	8005806 <_malloc_r+0xea>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	4639      	mov	r1, r7
 8005772:	4630      	mov	r0, r6
 8005774:	eb04 0903 	add.w	r9, r4, r3
 8005778:	f000 f8c2 	bl	8005900 <_sbrk_r>
 800577c:	4581      	cmp	r9, r0
 800577e:	d142      	bne.n	8005806 <_malloc_r+0xea>
 8005780:	6821      	ldr	r1, [r4, #0]
 8005782:	1a6d      	subs	r5, r5, r1
 8005784:	4629      	mov	r1, r5
 8005786:	4630      	mov	r0, r6
 8005788:	f7ff ffa6 	bl	80056d8 <sbrk_aligned>
 800578c:	3001      	adds	r0, #1
 800578e:	d03a      	beq.n	8005806 <_malloc_r+0xea>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	442b      	add	r3, r5
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	f8d8 3000 	ldr.w	r3, [r8]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	bb62      	cbnz	r2, 80057f8 <_malloc_r+0xdc>
 800579e:	f8c8 7000 	str.w	r7, [r8]
 80057a2:	e00f      	b.n	80057c4 <_malloc_r+0xa8>
 80057a4:	6822      	ldr	r2, [r4, #0]
 80057a6:	1b52      	subs	r2, r2, r5
 80057a8:	d420      	bmi.n	80057ec <_malloc_r+0xd0>
 80057aa:	2a0b      	cmp	r2, #11
 80057ac:	d917      	bls.n	80057de <_malloc_r+0xc2>
 80057ae:	1961      	adds	r1, r4, r5
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	6025      	str	r5, [r4, #0]
 80057b4:	bf18      	it	ne
 80057b6:	6059      	strne	r1, [r3, #4]
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	bf08      	it	eq
 80057bc:	f8c8 1000 	streq.w	r1, [r8]
 80057c0:	5162      	str	r2, [r4, r5]
 80057c2:	604b      	str	r3, [r1, #4]
 80057c4:	4630      	mov	r0, r6
 80057c6:	f000 f82f 	bl	8005828 <__malloc_unlock>
 80057ca:	f104 000b 	add.w	r0, r4, #11
 80057ce:	1d23      	adds	r3, r4, #4
 80057d0:	f020 0007 	bic.w	r0, r0, #7
 80057d4:	1ac2      	subs	r2, r0, r3
 80057d6:	bf1c      	itt	ne
 80057d8:	1a1b      	subne	r3, r3, r0
 80057da:	50a3      	strne	r3, [r4, r2]
 80057dc:	e7af      	b.n	800573e <_malloc_r+0x22>
 80057de:	6862      	ldr	r2, [r4, #4]
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	bf0c      	ite	eq
 80057e4:	f8c8 2000 	streq.w	r2, [r8]
 80057e8:	605a      	strne	r2, [r3, #4]
 80057ea:	e7eb      	b.n	80057c4 <_malloc_r+0xa8>
 80057ec:	4623      	mov	r3, r4
 80057ee:	6864      	ldr	r4, [r4, #4]
 80057f0:	e7ae      	b.n	8005750 <_malloc_r+0x34>
 80057f2:	463c      	mov	r4, r7
 80057f4:	687f      	ldr	r7, [r7, #4]
 80057f6:	e7b6      	b.n	8005766 <_malloc_r+0x4a>
 80057f8:	461a      	mov	r2, r3
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d1fb      	bne.n	80057f8 <_malloc_r+0xdc>
 8005800:	2300      	movs	r3, #0
 8005802:	6053      	str	r3, [r2, #4]
 8005804:	e7de      	b.n	80057c4 <_malloc_r+0xa8>
 8005806:	230c      	movs	r3, #12
 8005808:	6033      	str	r3, [r6, #0]
 800580a:	4630      	mov	r0, r6
 800580c:	f000 f80c 	bl	8005828 <__malloc_unlock>
 8005810:	e794      	b.n	800573c <_malloc_r+0x20>
 8005812:	6005      	str	r5, [r0, #0]
 8005814:	e7d6      	b.n	80057c4 <_malloc_r+0xa8>
 8005816:	bf00      	nop
 8005818:	20000218 	.word	0x20000218

0800581c <__malloc_lock>:
 800581c:	4801      	ldr	r0, [pc, #4]	@ (8005824 <__malloc_lock+0x8>)
 800581e:	f000 b8a9 	b.w	8005974 <__retarget_lock_acquire_recursive>
 8005822:	bf00      	nop
 8005824:	20000358 	.word	0x20000358

08005828 <__malloc_unlock>:
 8005828:	4801      	ldr	r0, [pc, #4]	@ (8005830 <__malloc_unlock+0x8>)
 800582a:	f000 b8a4 	b.w	8005976 <__retarget_lock_release_recursive>
 800582e:	bf00      	nop
 8005830:	20000358 	.word	0x20000358

08005834 <memmove>:
 8005834:	4288      	cmp	r0, r1
 8005836:	b510      	push	{r4, lr}
 8005838:	eb01 0402 	add.w	r4, r1, r2
 800583c:	d902      	bls.n	8005844 <memmove+0x10>
 800583e:	4284      	cmp	r4, r0
 8005840:	4623      	mov	r3, r4
 8005842:	d807      	bhi.n	8005854 <memmove+0x20>
 8005844:	1e43      	subs	r3, r0, #1
 8005846:	42a1      	cmp	r1, r4
 8005848:	d008      	beq.n	800585c <memmove+0x28>
 800584a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800584e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005852:	e7f8      	b.n	8005846 <memmove+0x12>
 8005854:	4402      	add	r2, r0
 8005856:	4601      	mov	r1, r0
 8005858:	428a      	cmp	r2, r1
 800585a:	d100      	bne.n	800585e <memmove+0x2a>
 800585c:	bd10      	pop	{r4, pc}
 800585e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005866:	e7f7      	b.n	8005858 <memmove+0x24>

08005868 <memset>:
 8005868:	4402      	add	r2, r0
 800586a:	4603      	mov	r3, r0
 800586c:	4293      	cmp	r3, r2
 800586e:	d100      	bne.n	8005872 <memset+0xa>
 8005870:	4770      	bx	lr
 8005872:	f803 1b01 	strb.w	r1, [r3], #1
 8005876:	e7f9      	b.n	800586c <memset+0x4>

08005878 <_raise_r>:
 8005878:	291f      	cmp	r1, #31
 800587a:	b538      	push	{r3, r4, r5, lr}
 800587c:	4605      	mov	r5, r0
 800587e:	460c      	mov	r4, r1
 8005880:	d904      	bls.n	800588c <_raise_r+0x14>
 8005882:	2316      	movs	r3, #22
 8005884:	6003      	str	r3, [r0, #0]
 8005886:	f04f 30ff 	mov.w	r0, #4294967295
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800588e:	b112      	cbz	r2, 8005896 <_raise_r+0x1e>
 8005890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005894:	b94b      	cbnz	r3, 80058aa <_raise_r+0x32>
 8005896:	4628      	mov	r0, r5
 8005898:	f000 f830 	bl	80058fc <_getpid_r>
 800589c:	4622      	mov	r2, r4
 800589e:	4601      	mov	r1, r0
 80058a0:	4628      	mov	r0, r5
 80058a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058a6:	f000 b817 	b.w	80058d8 <_kill_r>
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d00a      	beq.n	80058c4 <_raise_r+0x4c>
 80058ae:	1c59      	adds	r1, r3, #1
 80058b0:	d103      	bne.n	80058ba <_raise_r+0x42>
 80058b2:	2316      	movs	r3, #22
 80058b4:	6003      	str	r3, [r0, #0]
 80058b6:	2001      	movs	r0, #1
 80058b8:	e7e7      	b.n	800588a <_raise_r+0x12>
 80058ba:	2100      	movs	r1, #0
 80058bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80058c0:	4620      	mov	r0, r4
 80058c2:	4798      	blx	r3
 80058c4:	2000      	movs	r0, #0
 80058c6:	e7e0      	b.n	800588a <_raise_r+0x12>

080058c8 <raise>:
 80058c8:	4b02      	ldr	r3, [pc, #8]	@ (80058d4 <raise+0xc>)
 80058ca:	4601      	mov	r1, r0
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	f7ff bfd3 	b.w	8005878 <_raise_r>
 80058d2:	bf00      	nop
 80058d4:	20000070 	.word	0x20000070

080058d8 <_kill_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d07      	ldr	r5, [pc, #28]	@ (80058f8 <_kill_r+0x20>)
 80058dc:	2300      	movs	r3, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	602b      	str	r3, [r5, #0]
 80058e6:	f7fb fb37 	bl	8000f58 <_kill>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	d102      	bne.n	80058f4 <_kill_r+0x1c>
 80058ee:	682b      	ldr	r3, [r5, #0]
 80058f0:	b103      	cbz	r3, 80058f4 <_kill_r+0x1c>
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	bd38      	pop	{r3, r4, r5, pc}
 80058f6:	bf00      	nop
 80058f8:	20000354 	.word	0x20000354

080058fc <_getpid_r>:
 80058fc:	f7fb bb24 	b.w	8000f48 <_getpid>

08005900 <_sbrk_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4d06      	ldr	r5, [pc, #24]	@ (800591c <_sbrk_r+0x1c>)
 8005904:	2300      	movs	r3, #0
 8005906:	4604      	mov	r4, r0
 8005908:	4608      	mov	r0, r1
 800590a:	602b      	str	r3, [r5, #0]
 800590c:	f7fb fb40 	bl	8000f90 <_sbrk>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d102      	bne.n	800591a <_sbrk_r+0x1a>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	b103      	cbz	r3, 800591a <_sbrk_r+0x1a>
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	20000354 	.word	0x20000354

08005920 <__errno>:
 8005920:	4b01      	ldr	r3, [pc, #4]	@ (8005928 <__errno+0x8>)
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000070 	.word	0x20000070

0800592c <__libc_init_array>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	4d0d      	ldr	r5, [pc, #52]	@ (8005964 <__libc_init_array+0x38>)
 8005930:	4c0d      	ldr	r4, [pc, #52]	@ (8005968 <__libc_init_array+0x3c>)
 8005932:	1b64      	subs	r4, r4, r5
 8005934:	10a4      	asrs	r4, r4, #2
 8005936:	2600      	movs	r6, #0
 8005938:	42a6      	cmp	r6, r4
 800593a:	d109      	bne.n	8005950 <__libc_init_array+0x24>
 800593c:	4d0b      	ldr	r5, [pc, #44]	@ (800596c <__libc_init_array+0x40>)
 800593e:	4c0c      	ldr	r4, [pc, #48]	@ (8005970 <__libc_init_array+0x44>)
 8005940:	f000 f872 	bl	8005a28 <_init>
 8005944:	1b64      	subs	r4, r4, r5
 8005946:	10a4      	asrs	r4, r4, #2
 8005948:	2600      	movs	r6, #0
 800594a:	42a6      	cmp	r6, r4
 800594c:	d105      	bne.n	800595a <__libc_init_array+0x2e>
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	f855 3b04 	ldr.w	r3, [r5], #4
 8005954:	4798      	blx	r3
 8005956:	3601      	adds	r6, #1
 8005958:	e7ee      	b.n	8005938 <__libc_init_array+0xc>
 800595a:	f855 3b04 	ldr.w	r3, [r5], #4
 800595e:	4798      	blx	r3
 8005960:	3601      	adds	r6, #1
 8005962:	e7f2      	b.n	800594a <__libc_init_array+0x1e>
 8005964:	08005c08 	.word	0x08005c08
 8005968:	08005c08 	.word	0x08005c08
 800596c:	08005c08 	.word	0x08005c08
 8005970:	08005c0c 	.word	0x08005c0c

08005974 <__retarget_lock_acquire_recursive>:
 8005974:	4770      	bx	lr

08005976 <__retarget_lock_release_recursive>:
 8005976:	4770      	bx	lr

08005978 <memcpy>:
 8005978:	440a      	add	r2, r1
 800597a:	4291      	cmp	r1, r2
 800597c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005980:	d100      	bne.n	8005984 <memcpy+0xc>
 8005982:	4770      	bx	lr
 8005984:	b510      	push	{r4, lr}
 8005986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800598a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800598e:	4291      	cmp	r1, r2
 8005990:	d1f9      	bne.n	8005986 <memcpy+0xe>
 8005992:	bd10      	pop	{r4, pc}

08005994 <_free_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4605      	mov	r5, r0
 8005998:	2900      	cmp	r1, #0
 800599a:	d041      	beq.n	8005a20 <_free_r+0x8c>
 800599c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a0:	1f0c      	subs	r4, r1, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bfb8      	it	lt
 80059a6:	18e4      	addlt	r4, r4, r3
 80059a8:	f7ff ff38 	bl	800581c <__malloc_lock>
 80059ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005a24 <_free_r+0x90>)
 80059ae:	6813      	ldr	r3, [r2, #0]
 80059b0:	b933      	cbnz	r3, 80059c0 <_free_r+0x2c>
 80059b2:	6063      	str	r3, [r4, #4]
 80059b4:	6014      	str	r4, [r2, #0]
 80059b6:	4628      	mov	r0, r5
 80059b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059bc:	f7ff bf34 	b.w	8005828 <__malloc_unlock>
 80059c0:	42a3      	cmp	r3, r4
 80059c2:	d908      	bls.n	80059d6 <_free_r+0x42>
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	1821      	adds	r1, r4, r0
 80059c8:	428b      	cmp	r3, r1
 80059ca:	bf01      	itttt	eq
 80059cc:	6819      	ldreq	r1, [r3, #0]
 80059ce:	685b      	ldreq	r3, [r3, #4]
 80059d0:	1809      	addeq	r1, r1, r0
 80059d2:	6021      	streq	r1, [r4, #0]
 80059d4:	e7ed      	b.n	80059b2 <_free_r+0x1e>
 80059d6:	461a      	mov	r2, r3
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	b10b      	cbz	r3, 80059e0 <_free_r+0x4c>
 80059dc:	42a3      	cmp	r3, r4
 80059de:	d9fa      	bls.n	80059d6 <_free_r+0x42>
 80059e0:	6811      	ldr	r1, [r2, #0]
 80059e2:	1850      	adds	r0, r2, r1
 80059e4:	42a0      	cmp	r0, r4
 80059e6:	d10b      	bne.n	8005a00 <_free_r+0x6c>
 80059e8:	6820      	ldr	r0, [r4, #0]
 80059ea:	4401      	add	r1, r0
 80059ec:	1850      	adds	r0, r2, r1
 80059ee:	4283      	cmp	r3, r0
 80059f0:	6011      	str	r1, [r2, #0]
 80059f2:	d1e0      	bne.n	80059b6 <_free_r+0x22>
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	6053      	str	r3, [r2, #4]
 80059fa:	4408      	add	r0, r1
 80059fc:	6010      	str	r0, [r2, #0]
 80059fe:	e7da      	b.n	80059b6 <_free_r+0x22>
 8005a00:	d902      	bls.n	8005a08 <_free_r+0x74>
 8005a02:	230c      	movs	r3, #12
 8005a04:	602b      	str	r3, [r5, #0]
 8005a06:	e7d6      	b.n	80059b6 <_free_r+0x22>
 8005a08:	6820      	ldr	r0, [r4, #0]
 8005a0a:	1821      	adds	r1, r4, r0
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	bf04      	itt	eq
 8005a10:	6819      	ldreq	r1, [r3, #0]
 8005a12:	685b      	ldreq	r3, [r3, #4]
 8005a14:	6063      	str	r3, [r4, #4]
 8005a16:	bf04      	itt	eq
 8005a18:	1809      	addeq	r1, r1, r0
 8005a1a:	6021      	streq	r1, [r4, #0]
 8005a1c:	6054      	str	r4, [r2, #4]
 8005a1e:	e7ca      	b.n	80059b6 <_free_r+0x22>
 8005a20:	bd38      	pop	{r3, r4, r5, pc}
 8005a22:	bf00      	nop
 8005a24:	20000218 	.word	0x20000218

08005a28 <_init>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	bf00      	nop
 8005a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2e:	bc08      	pop	{r3}
 8005a30:	469e      	mov	lr, r3
 8005a32:	4770      	bx	lr

08005a34 <_fini>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr
